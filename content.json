{"meta":{"title":"博客主页","subtitle":"","description":"","author":"Mr feng","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2022-01-13T16:20:47.458Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"thinking/babel.html","permalink":"http://example.com/thinking/babel.html","excerpt":"","text":"babel用于es6及以上的语法转换。只关心语法不关心新的api和module； module如果文件中导入了其他js文件，babel本身是无法导入的，所以可以使用webpack，在webpack中一切导入的文件都是模块。 说到模块化，顺便记住：es6的imports 是静态导入，在编译时就导入了； 而commonjs的require是运行时导入，在编译前是不确定文件的。 es 新的api怎么兼容babel-polyfill： core.js + regenerator babel-polyfill的缺点会污染全局变量。如果想要构建第三方库文件，是不能出现环境污染的。 可以使用 babel-runtime解决，原理：改变变量名称，不与使用者的变量发生冲突。"},{"title":"","date":"2022-01-13T16:20:46.160Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"thinking/javascript.html","permalink":"http://example.com/thinking/javascript.html","excerpt":"","text":"javascript框架基础知识一、this的几种指向 在严格模式下自执行函数指向undefined 非严格模式指向自执行函数指向window所以可以用这么判断当前环境是否严格模式 1(function()&#123;return !this&#125;()) 在一个函数a里面定义一个函数b，然后在a函数里调用这个函数b，此时this指向跟自执行函数一样 二、new操作做了什么模拟new的过程: 123456789101112131415const create = function(ClassName, ...args) &#123; //让instant.prototype指向ClassName.prototype，缺少这一步新建的实例就没有ClassName原型 let instant = Object.create(ClassName.prototype) ClassName.apply(instant, args) return instant;&#125;const Dragon = function(name) &#123; this.name = name;&#125;Dragon.prototype.sounds = &#x27;吼吼吼...&#x27;let dragon = create(Dragon, &#x27;小明&#x27;) dragon.name //小明dragon.sounds //吼吼吼... 三，Prototype定义：每个对象都会有prototype，prototype指向一个对象，类似于java的静态变量继承。 为什么会有prototype？ 一切都是为了复用和解藕，所有实例共享一个对象a，a对象是所有实例都需要且一样的。 实例怎么指向原型。 12obj.__proto__obj.constructor.prototype 四，原型链由于prototype指向一个对象。而js对象都会有自己的原型，对象原型＞对象＞对象原型＞对象…，因此形成了原型链。 1. 原型链的尽头是什么呢 每个对象的原型链末端都会经过&lt;u&gt;Object.prototype&lt;/u&gt;，而&lt;u&gt;Object.prototype＝undefined&lt;/u&gt;。 &lt;u&gt;Object.getPrototypeOf(Object.prototype)结果为null&lt;/u&gt; Object.prototype不能够被赋值, 会报错 instanceof判断对象是否属于某个构造器。 [^注意]: 1. 只要一个对象的原型不是null，instanceof运算符的判断就不会失真；2. 对于undefined和null，instanceOf运算符总是返回false； 3. instanceof不适用原始类型的值。 12345var s = &#x27;hello&#x27;;s instanceof String // falseundefined instanceof Object // falsenull instanceof Object // falsethis instanceof ClassName //用于判断是否new出来的 五、javacript 奇淫技巧!~判断indexof 123456!取非0都为真~-1结果为0所以可以用来判断数组是否不包含某个元素if(!~names.indexOf(name))&#123;//...&#125;"},{"title":"","date":"2022-01-13T16:20:45.513Z","updated":"2021-08-30T07:32:40.418Z","comments":true,"path":"thinking/jb-ui.html","permalink":"http://example.com/thinking/jb-ui.html","excerpt":"","text":"快速使用 安装npm包 jb-cms-ui-test 12345npm install jb-cms-ui-testShell 新建一个listMixin.js文件，继承BaseListPage 1234567//listMixin.jsimport Vue from &quot;vue&quot;;import BtnOperate from &quot;@/page/user/components/BtnOperate&quot;;import JBCMSUI from &#x27;@lib/jb_cms_ui&#x27;const &#123; BaseListPage &#125; = JBCMSUIexport default &#123; extends: BaseListPage, beforeMount() &#123; Vue.component(&#x27;btn-operate&#x27;, BtnOperate) &#125;,&#125;TypeScript 在vue文件import， 并且在mixins选项中使用 123456import listMixin from &quot;@/mixins/ListMixin&quot;;export default &#123;...mixins: [listMixin],...&#125;TypeScript 在vue文件的 模板中 123456&lt;jb-table-widget :table=&quot;table&quot; :fetch-list-data=&quot;queryList&quot;&gt;&lt;/jb-table-widget&gt;// queryList是 BaseListPage里的方法TypeScript vue文件的js部分 1234567import Course from &#x27;@/api&#x27;export default&#123; //api管理 apiManager: &#123; api: Course, listFunc: &quot;getPage&quot;, &#125;, //表格配置 table: &#123; tableData: [], //表格列的配置 columnConfigs: [ &#123; label: &quot;列标题&quot;, prop: &quot;id&quot;, attrs: &#123; align: &quot;center&quot;, width: 150 &#125;, &#125;, ], &#125;&#125;TypeScript table属性说明 tableData: Array类型(对象数组), 数据源 columnConfigs：表格列的配置，包括以下属性 label: String类型，列标题 prop: tableData每个元素的对象属性名(比如id, name)，当使用自定义组件时，这个值无效； attrs: 会直接填在标签的属性上 listeners: 监听的事件 component: 自定义组件，包括name、attrs、attrsStatic、listeners四个属性、需要在beforeMount选项全局注册） name: String类型，注册的组件名 attrs: Object类型，键是组件的prop，值是tableData的属性 attrsStatic: Object类型，当无需tableData的数据时使用，键是组件的prop，值会原封不动的传入组件 listeners： 监听组件事件 组件的功能描述 继承关系继承于：BaseListPage + 添加网页链接 显示样式一显示效果： + 上传图片 代码示例： 1234567&lt;template&gt; &lt;jb-table-widget :table=&quot;table&quot; :fetch-list-data=&quot;queryList&quot;&gt;&lt;/jb-table-widget&gt;&lt;/template&gt;Plain Text 1234567// js 部分， 下面代码写在vue的 data()&#123; return &#123;//写在这里...&#125; &#125;// 以下是例子 table: &#123; tableData: [], columnConfigs: [ &#123; label: &quot;课程ID&quot;, prop: &quot;id&quot;, attrs: &#123; align: &quot;center&quot;, width: 150 &#125;, &#125;, &#123; label: &quot;课程信息&quot;, prop: &quot;&quot;, attrs: &#123; align: &quot;center&quot;, minWidth: 300 &#125;, component: &#123; name: &quot;slot-course&quot;, attrs: &#123; avatar: &quot;coverUrls&quot;, rightTopStr: &quot;title&quot;, &#125;, &#125;, &#125;, &#123; label: &quot;学期归属&quot;, prop: &quot;&quot;, attrs: &#123; width: 230, align: &quot;center&quot; &#125;, component: &#123; name: &quot;term-type&quot;, attrs: &#123; termType: &quot;termType&quot;, &#125;, &#125;, &#125;, &#123; label: &quot;是否上架&quot;, prop: &quot;&quot;, attrs: &#123;&#125;, component: &#123; name: &quot;switch-state&quot;, attrs: &#123; id: &quot;id&quot;, value: &quot;isDisabled&quot;, row: &quot;&quot;, &#125;, attrsStatic: &#123; buttons: [ &#123; label: &quot;课程&quot;, open: false, emitEvent: &quot;change&quot;, &#125;, ], type: false, &#125;, listeners: &#123; change: _.debounce( async (bol, id) =&gt; &#123; console.log(bol, id, &quot;点击&quot;); if (bol) &#123; console.log(&quot;上架&quot;); await Course.onShelf(id).then((res) =&gt; &#123; this.show(res.message); &#125;); &#125; else &#123; console.log(&quot;下架&quot;); await Course.offShelf(id).then((res) =&gt; &#123; this.show(res.message); &#125;); &#125; console.log(123); await this.getTabs(); this.isDisabled = false; _self.queryList(); // console.log(this.table.columnConfigs.attrsStatic); // await this.$nextTick(() =&gt; &#123;&#125;); &#125;, 250, &#123; maxWait: 1000 &#125; ), &#125;, &#125;, &#125;, &#123; label: &quot;操作&quot;, attrs: &#123; minWidth: 260, fixed: &quot;right&quot;, align: &quot;center&quot; &#125;, prop: &quot;&quot;, component: &#123; name: &quot;btn-operate&quot;, attrs: &#123; row: &quot;&quot;, isDisabled: &quot;isDisabled&quot;, hid: &quot;hid&quot; &#125;, attrsStatic: &#123; buttons: [ &#123; label: &quot;编辑&quot;, emitEvent: &quot;edit&quot;, class: [&quot;color-blue&quot;] &#125;, &#123; label: &quot;删除&quot;, emitEvent: &quot;delete&quot;, class: [&quot;color-red&quot;], &#125;, ], &#125;, listeners: &#123; edit: (row) =&gt; &#123; console.log(&quot;编辑&quot;); this.onEdit(row.id); &#125;, delete: (row) =&gt; &#123; this.deleteCourseDialog = true; this.deleteCourseId = row.id; &#125;, &#125;, &#125;, &#125;, ], paginate: &#123; isShow: true, page: 1, pageSize: 15, total: 0, &#125;, &#125;JavaScript Attributes 参数 说明 类型 data 表格数据源 array columnConfigs 表格列配置 array: columnConfig cssStyle 表格样式 paginate 分页配置 fetch function columnConfig 属性 说明 类型 可选值 默认值 label prop component 自定义组件名称 paginate 属性 说明 类型 可选值 默认值 isShow page pageSize totoal Events 事件名称 说明 回调参数 Methods 方法名 说明 参数 fetchListData"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/vim.html","permalink":"http://example.com/thinking/vim.html","excerpt":"","text":"​ gg:移动到文件第一个字符； d: 删除 ； G：文件末尾 删除全部内容: ggdG 内容对齐：gg=G 移动到行首：^ 移动到行尾：$ 搜索关键词: /内容 删除xx行至xx行: 1,10d w:到下一个单词的开头 e:到下一个单词的结尾 *：匹配光标在当前所在的单词，移动光标到下一个 使用n|N上下选择 #：移动光标到上一个 使用n|N上下选择"},{"title":"","date":"2022-01-13T16:20:44.382Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"thinking/typescript.html","permalink":"http://example.com/thinking/typescript.html","excerpt":"","text":"粗略了解TypeScript语法开发环境轻量服务器：npm install lite-server –save-dev 接口1. 对变量使用123456789interface User &#123; name: string; age: nubmer;&#125;const user: User &#123; name: &#x27;千条哥&#x27;, age: 45,&#125; 2. 对函数返回值使用123function getUser(): User &#123;//...&#125; Composing types1type MyBool = true | false 泛型 Generics123456789type StringArray = Array&lt;string&gt;;type ObjectWithNameArray = Array&lt;&#123; name: string &#125;&gt;;interface Backpack&lt;Type&gt; &#123; add: (obj: Type) =&gt; void; get: () =&gt; Type;&#125;declare const backpack: Backpack&lt;string&gt;;const object = backpack.get()"},{"title":"","date":"2022-01-13T16:20:32.772Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"thinking/vue2.html","permalink":"http://example.com/thinking/vue2.html","excerpt":"","text":"Vue2原理数据驱动核心点1. Object.defineProperty 拦截属性2. diff算法下的keyObject.defineProperty 拦截属性a. 简单实现数据驱动视图1234567891011121314151617181920212223242526272829303132333435363738394041//监听对象const observe = function (target) &#123; if (typeof target !== &#x27;object&#x27; || target === null) &#123; return &#125; Object.keys(target).forEach(key =&gt; &#123; defineProp(target, key, target[key]) &#125;)&#125;//修改属性值时拦截对象，并更新视图const defineProp = function (target, prop, value) &#123; observe(value) Object.defineProperty(target, prop, &#123; get() &#123; return value; &#125;, set(newValue) &#123; if(value !== newValue)&#123; observe(newValue) value = newValue updateView() &#125; &#125; &#125;)&#125;//更新视图const updateView = function () &#123; console.log(&quot;updateView&quot;)&#125;// model层let data = &#123; name: &#x27;feng&#x27;, school: &#123; name: &#x27;beautiful school&#x27; &#125;&#125;//监听 dataobserve(data) 初步完成一个数据驱动视图，过程： 递归遍历data属性，如果是object类型，则遍历所有属性，对象的属性使用Object.defineProperty拦截处理，当set新值时更新视图。缺点： Object.defineProperty只能拦截属性，data没有的属性，调用observe之后，无法监听； 对象层级太多时，递归计算量大； 下面添加自定义数组监听，数组操作，1234567let customArray = Object.create(Array.prototype);[&#x27;push&#x27;, &#x27;pop&#x27;].forEach(method =&gt; &#123; customArray[method] = function () &#123; updateView() Array.prototype[method].call(this, ...arguments) &#125;&#125;) observe方法让 数组类型 继承自定义数组12345678910111213const observe = function (target) &#123; if (typeof target !== &#x27;object&#x27; || target === null) &#123; return &#125; if (Array.isArray(target)) &#123; target.__proto__ = customArray; &#125; Object.keys(target).forEach(key =&gt; &#123; defineProp(target, key, target[key]) &#125;)&#125; 2. diff算法下的key核心：diff算法中通过tag和key判断是否sameNode，减少渲染次数，提高性能。3.vue-router两种模式的原理hash: 监听；如何改变路由 history: 使用这种模式的要求；监听；前进；"},{"title":"tags","date":"2022-01-09T10:06:05.000Z","updated":"2022-01-09T10:09:11.696Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-01-13T16:20:36.824Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"thinking/vue3.html","permalink":"http://example.com/thinking/vue3.html","excerpt":"","text":"vue3.x 新特性一、setup + 组合式api + jsx优点：在setup闭包内，不需要this，引用清晰。组合式api复用更加灵活。 二、tree-sharking(死代码消除)可减少vue体积 尝试了解其原理 三、 各种api的用法12345678import &#123; createApp &#125; from &#x27;vue&#x27;const app = createApp(&#123;&#125;)app.componentapp.directiveapp.mixin app.useapp.configapp.provide 1234567891011121314151617181920212223import &#123; defineComponent &#125; from &#x27;vue&#x27;import &#123; ref, onMounted &#125; from &#x27;vue&#x27;import &#123; toRefs,computed, watch &#125; from &#x27;vue&#x27;&lt;script lang=&quot;ts&quot;&gt;import &#123; computed, defineComponent &#125; from &#x27;vue&#x27;export default defineComponent(&#123; props: (&#123; msg: String &#125; as unknown) as undefined, setup(props: &#123; msg: string &#125;) &#123; const computedMsg = computed(() =&gt; props.msg + &#x27;!!!&#x27;) return &#123; computedMsg, &#125; &#125;&#125;)&lt;/script&gt; watchEffect会自动监听函数内的ref、reactive引用。 四、函数式组件12345678import &#123; h &#125; from &#x27;vue&#x27;const DynamicHeading = (props, context) =&gt; &#123; return h(`h$&#123;props.level&#125;`, context.attrs, context.slots)&#125;DynamicHeading.props = [&#x27;level&#x27;]export default DynamicHeading 五、片段(支持多个根节点，注意：非 Prop 的 Attribute）禁用 attribute 继承的常见情况是需要将 attribute 应用于根节点之外的其他元素。 1inheritAttrs:false //传给组件的 非props、v-on 也和props一起传到组件的$attrs属性 六、Teleport123456789101112&lt;teleport to=&quot;#modals&quot;&gt; &lt;div&gt;A&lt;/div&gt;&lt;/teleport&gt;&lt;teleport to=&quot;#modals&quot;&gt; &lt;div&gt;B&lt;/div&gt;&lt;/teleport&gt;&lt;!-- result--&gt;&lt;div id=&quot;modals&quot;&gt; &lt;div&gt;A&lt;/div&gt; &lt;div&gt;B&lt;/div&gt;&lt;/div&gt; 七、 v-model支持定义修饰符、支持多v-model 八、setup接受两个参数： props: 传入定义的props context: 包含 attrs、slots和emit 三个对象"},{"title":"","date":"2022-01-13T16:20:40.752Z","updated":"2021-07-26T13:55:56.628Z","comments":true,"path":"thinking/webpack-plugin-dll.html","permalink":"http://example.com/thinking/webpack-plugin-dll.html","excerpt":"","text":"DllPlugin+DllReferencePlugin实现动态库将不需要变化的第三方库打包成js文件独立出来通过manifest.json维护。 使用：先使用dllplugin插件打包：dll.js和manifest.json文件12345678910111213141516171819202122232425262728293031323334//webpack.dll.js 配置文件const path = require(&#x27;path&#x27;)const DllPlugin = require(&#x27;webpack/lib/DllPlugin&#x27;)const &#123;srcPath, distPath&#125; = require(&#x27;./paths&#x27;)module.exports = &#123; mode: &#x27;development&#x27;, // JS 执行入口文件 entry: &#123; // 把 多个 相关模块的放到一个单独的动态链接库 vendor: [&#x27;vue&#x27;, &#x27;element-ui&#x27;, &#x27;vue-router&#x27;, &#x27;axios&#x27;, &#x27;lodash&#x27;, &#x27;vuex&#x27;, &#x27;vue2-transitions&#x27;, &#x27;moment&#x27;, &#x27;echarts&#x27;, &#x27;ali-oss&#x27;] &#125;, output: &#123; // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称， // 也就是 entry 中配置的 react 和 polyfill filename: &#x27;[name].dll.js&#x27;, // 输出的文件都放到 dist 目录下 path: distPath, // 存放动态链接库的全局变量名称，例如对应 vendor 来说就是 vendor__lib__ // 之所以在前面加上 __lib__ 是为了防止全局变量冲突 library: &#x27;[name]__lib__&#x27;, &#125;, plugins: [ // 接入 DllPlugin new DllPlugin(&#123; // 动态链接库的全局变量名称，需要和 output.library 中保持一致 // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值 // 例如 vendor.manifest.json 中就有 &quot;name&quot;: &quot;vendor__lib__&quot; name: &#x27;[name]__lib__&#x27;, // 描述动态链接库的 manifest.json 文件输出时的文件名称 path: path.join(distPath, &#x27;[name].manifest.json&#x27;), &#125;), ],&#125; 1使用webpack --config webpack.dll.js 命令打包 vue.config.js文件中使用DllReferencePlugin插件 12345678910111213141516171819202122// 第一，引入 DllReferencePluginconst DllReferencePlugin = require(&#x27;webpack/lib/DllReferencePlugin&#x27;);const webpack = require(&#x27;webpack&#x27;)const path = require(&#x27;path&#x27;)const &#123; srcPath, distPath &#125; = require(&#x27;./paths&#x27;)const manifest = require(&#x27;./dist/vendor.manifest.json&#x27;);module.exports = &#123; configureWebpack: &#123; plugins: [ new webpack.DefinePlugin(&#123; // window.ENV = &#x27;production&#x27; ENV: JSON.stringify(&#x27;development&#x27;) &#125;), // 第三，告诉 Webpack 使用了哪些动态链接库 new DllReferencePlugin(&#123; // 描述 动态链接库的文件内容 manifest &#125;), ] &#125;&#125; 最后需要在js或者index.html中引用vendor.dll.js文件"},{"title":"","date":"2022-01-13T16:20:43.416Z","updated":"2021-07-26T13:55:56.628Z","comments":true,"path":"thinking/webpack.html","permalink":"http://example.com/thinking/webpack.html","excerpt":"","text":"Webpack优化 打包文件名contentHash: 根据文件内容形成的hash，如果内容不变hash值不变，命中缓存时不会重新加载。 css抽离为什么要抽离？因为css文件内容并不经常变，抽离之后有利与缓存，加载网页的速度。 默认打包过程：css-loader –&gt; style-loader； style-loader会将css放到 网页的style标签里； MiniExtractPlugin插件抽离到css文件中； css压缩 TerserJSPlugin + OptimizeCSSAssetsPlugin css跨浏览器兼容使用postcss-loader处理css 第三方库用cdn代替，减少打包的体积webpack中配置externals，一般用key-value的方式配置，左边是导入模块的名称（比如element-ui)，右边是cdn链接产生的全局变量（比如 ELEMENT） 使用splitChunks分割大小 webpackChunkName 注释分割1例子：/* webpackChunkName: &quot;userDetail&quot;*/ 插件使用集合 DllPlugin+DllReferencePlugin实现动态库将不需要变化的第三方库打包成js文件独立出来通过manifest.json维护。 使用：先使用dllplugin插件打包：dll.js和manifest.json文件12345678910111213141516171819202122232425262728293031323334//webpack.dll.js 配置文件const path = require(&#x27;path&#x27;)const DllPlugin = require(&#x27;webpack/lib/DllPlugin&#x27;)const &#123;srcPath, distPath&#125; = require(&#x27;./paths&#x27;)module.exports = &#123; mode: &#x27;development&#x27;, // JS 执行入口文件 entry: &#123; // 把 多个 相关模块的放到一个单独的动态链接库 vendor: [&#x27;vue&#x27;, &#x27;element-ui&#x27;, &#x27;vue-router&#x27;, &#x27;axios&#x27;, &#x27;lodash&#x27;, &#x27;vuex&#x27;, &#x27;vue2-transitions&#x27;, &#x27;moment&#x27;, &#x27;echarts&#x27;, &#x27;ali-oss&#x27;] &#125;, output: &#123; // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称， // 也就是 entry 中配置的 react 和 polyfill filename: &#x27;[name].dll.js&#x27;, // 输出的文件都放到 dist 目录下 path: distPath, // 存放动态链接库的全局变量名称，例如对应 vendor 来说就是 vendor__lib__ // 之所以在前面加上 __lib__ 是为了防止全局变量冲突 library: &#x27;[name]__lib__&#x27;, &#125;, plugins: [ // 接入 DllPlugin new DllPlugin(&#123; // 动态链接库的全局变量名称，需要和 output.library 中保持一致 // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值 // 例如 vendor.manifest.json 中就有 &quot;name&quot;: &quot;vendor__lib__&quot; name: &#x27;[name]__lib__&#x27;, // 描述动态链接库的 manifest.json 文件输出时的文件名称 path: path.join(distPath, &#x27;[name].manifest.json&#x27;), &#125;), ],&#125; 1使用webpack --config webpack.dll.js 命令打包 vue.config.js文件中使用DllReferencePlugin插件 12345678910111213141516171819202122// 第一，引入 DllReferencePluginconst DllReferencePlugin = require(&#x27;webpack/lib/DllReferencePlugin&#x27;);const webpack = require(&#x27;webpack&#x27;)const path = require(&#x27;path&#x27;)const &#123; srcPath, distPath &#125; = require(&#x27;./paths&#x27;)const manifest = require(&#x27;./dist/vendor.manifest.json&#x27;);module.exports = &#123; configureWebpack: &#123; plugins: [ new webpack.DefinePlugin(&#123; // window.ENV = &#x27;production&#x27; ENV: JSON.stringify(&#x27;development&#x27;) &#125;), // 第三，告诉 Webpack 使用了哪些动态链接库 new DllReferencePlugin(&#123; // 描述 动态链接库的文件内容 manifest &#125;), ] &#125;&#125; 最后需要在js或者index.html中引用vendor.dll.js文件"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/命令行.html","permalink":"http://example.com/thinking/%E5%91%BD%E4%BB%A4%E8%A1%8C.html","excerpt":"","text":"占用端口：lsof -i:8000 关闭进程： kill 进程号 复制文件内容到剪贴板： Mysql: service mysqld start (5.0版本是mysqld) service mysql start service mysql restart 系统命令行短链接设置: alias mysql=/usr/local/mysql/bin/mysql Docker: ip:地址： 进入容器后， cat /etc/hosts 1docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; cd30dbb10151 1CHANGE MASTER TO MASTER_HOST=&#x27;172.17.0.3&#x27;, MASTER_PORT=3306,MASTER_USER=&#x27;repl&#x27;,MASTER_PASSWORD=&#x27;123456&#x27;, master_log_file=&#x27;mysql-bin.000007&#x27;, master_log_pos=323, get_master_public_key=1; mysql 8.0之后加上这句配置：get_master_public_key=1; 1docker run -itd --name s2-sql -p 3336:3306 -e MYSQL_ROOT_PASSWORD=123456 amd64/mysql 查看系统磁盘占用： find / -type f -size +200M 2&gt;/dev/null|xargs du -shm 登录服务器： 密钥：ssh -i ~/.ssh/jyg_rsa &#x72;&#x6f;&#x6f;&#x74;&#64;&#x32;&#x33;&#46;&#x33;&#x34;&#x34;&#46;&#49;&#x32;&#46;&#52;&#53;&#x35; 文件权限：chmod a-r,a-w,a-x,u+r jyg_rsa"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/git.html","permalink":"http://example.com/thinking/git.html","excerpt":"","text":"git update-index –assume-unchanged /path/to/file #忽略跟踪 git update-index –no-assume-unchanged /path/to/file #恢复跟踪 git reset –hard HEAD^ 拉取服务器最近一次提交到暂存 回退版本 git reset –hard HEAD^ git push -f origin master git reset HEAD^: 不删除工作空间改动代码，撤销commit，并且撤销git add . –soft :不删除工作空间改动代码，撤销commit，不撤销git add .–hard: 删除工作空间改动代码，撤销commit，撤销git add .注意完成这个操作后，就恢复到了上一次的commit状态。 git commit –amend:如果commit注释写错了，只是想改一下注释"},{"title":"","date":"2022-01-10T06:29:54.232Z","updated":"2021-07-26T13:55:56.628Z","comments":true,"path":"thinking/数据结构.html","permalink":"http://example.com/thinking/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","excerpt":"","text":"关于sort排序，怎么快速确定升序与降序sort方法传入 (s, f) =&gt; {return f - s} 对比的两个数字中，s是后面的那个，f是第一个。 上面返回值中，谁在后一位则代表重哪端开始，正序排序"},{"title":"","date":"2022-01-13T16:20:51.473Z","updated":"2021-10-29T06:45:35.696Z","comments":true,"path":"thinking/最近快捷键.html","permalink":"http://example.com/thinking/%E6%9C%80%E8%BF%91%E5%BF%AB%E6%8D%B7%E9%94%AE.html","excerpt":"","text":"idea窗口切换: option + shift + command + ~ 光标历史切换： option + command + 方向左 清除没有用的import: control + option + o ​"},{"title":"","date":"2021-07-26T13:55:56.627Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"draft/javascript.html","permalink":"http://example.com/draft/javascript.html","excerpt":"","text":"javascript框架基础知识一、this的几种指向 在严格模式下自执行函数指向undefined 非严格模式指向自执行函数指向window所以可以用这么判断当前环境是否严格模式 1(function()&#123;return !this&#125;()) 在一个函数a里面定义一个函数b，然后在a函数里调用这个函数b，此时this指向跟自执行函数一样 二、new操作做了什么模拟new的过程: 123456789101112131415const create = function(ClassName, ...args) &#123; //让instant.prototype指向ClassName.prototype，缺少这一步新建的实例就没有ClassName原型 let instant = Object.create(ClassName.prototype) ClassName.apply(instant, args) return instant;&#125;const Dragon = function(name) &#123; this.name = name;&#125;Dragon.prototype.sounds = &#x27;吼吼吼...&#x27;let dragon = create(Dragon, &#x27;小明&#x27;) dragon.name //小明dragon.sounds //吼吼吼... 三，Prototype定义：每个对象都会有prototype，prototype指向一个对象，类似于java的静态变量继承。 为什么会有prototype？ 一切都是为了复用和解藕，所有实例共享一个对象a，a对象是所有实例都需要且一样的。 实例怎么指向原型。 12obj.__proto__obj.constructor.prototype 四，原型链由于prototype指向一个对象。而js对象都会有自己的原型，对象原型＞对象＞对象原型＞对象…，因此形成了原型链。 1. 原型链的尽头是什么呢每个对象的原型链末端都会经过Object.prototype，而Object.prototype＝undefined。Object.getPrototypeOf(Object.prototype)结果为null Object.prototype不能够被赋值, 会报错 instanceof判断对象是否属于某个构造器。 [^注意]: 1. 只要一个对象的原型不是null，instanceof运算符的判断就不会失真；2. 对于undefined和null，instanceOf运算符总是返回false； 3. instanceof不适用原始类型的值。 12345var s = &#x27;hello&#x27;;s instanceof String // falseundefined instanceof Object // falsenull instanceof Object // falsethis instanceof ClassName //用于判断是否new出来的"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/英语.html","permalink":"http://example.com/thinking/%E8%8B%B1%E8%AF%AD.html","excerpt":"","text":"数组类型(GenericArrayType) 参数化类型(ParameterizedType) 类型变量(TypeVariable) 通配符类型(WildcardType) 保留一切权利 all right reserved consensus（一致性） leader election（选举） command line interface(命令行) Coordinating Distributed Systems（协调分布式系统） off-the-shelf （现成的） from scratch（白手起家、从头开始） high-performance（高性能） skimp on them(对它们进行缩减) a centralized service for (…的集中服务) maintaining configuration information（维持配置信息） distributed synchronization（分布式同步） are used in some form or another（以某种形式使用） race conditions （竞争条件） in the presence of change（在变化面前） 算法名称： Exponential Backoff： https://googleapis.github.io/google-http-java-client/exponential-backoff.html"},{"title":"","date":"2021-07-26T13:55:56.626Z","updated":"2021-07-26T13:55:56.626Z","comments":true,"path":"demo/ts/genericsDemo.js","permalink":"http://example.com/demo/ts/genericsDemo.js","excerpt":"","text":"var MyNamed = /** @class */ (function () { function MyNamed() { } return MyNamed; }()); function findByName(x) { // TODO: Implement return undefined; } var x; var y = findByName(x); // expected y: string, got y: {} console.log(y, 111);"},{"title":"","date":"2021-07-26T13:55:56.627Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"demo/ts/package.json","permalink":"http://example.com/demo/ts/package.json","excerpt":"","text":"{\"name\":\"ts\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"genericsDemo.js\",\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"author\":\"\",\"license\":\"ISC\",\"devDependencies\":{\"lite-server\":\"^2.6.1\"}}"},{"title":"","date":"2021-07-26T13:55:56.627Z","updated":"2021-07-26T13:55:56.627Z","comments":true,"path":"demo/ts/package-lock.json","permalink":"http://example.com/demo/ts/package-lock.json","excerpt":"","text":"{\"name\":\"ts\",\"version\":\"1.0.0\",\"lockfileVersion\":1,\"requires\":true,\"dependencies\":{\"accepts\":{\"version\":\"1.3.7\",\"resolved\":\"https://registry.npmjs.org/accepts/-/accepts-1.3.7.tgz\",\"integrity\":\"sha512-Il80Qs2WjYlJIBNzNkK6KYqlVMTbZLXgHx2oT0pU/fjRHyEp+PEfEPY0R3WCwAGVOtauxh1hOxNgIf5bv7dQpA==\",\"dev\":true,\"requires\":{\"mime-types\":\"~2.1.24\",\"negotiator\":\"0.6.2\"}},\"after\":{\"version\":\"0.8.2\",\"resolved\":\"https://registry.npmjs.org/after/-/after-0.8.2.tgz\",\"integrity\":\"sha1-/ts5T58OAqqXaOcCvaI7UF+ufh8=\",\"dev\":true},\"ansi-regex\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz\",\"integrity\":\"sha1-w7M6te42DYbg5ijwRorn7yfWVN8=\",\"dev\":true},\"ansi-styles\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmjs.org/ansi-styles/-/ansi-styles-2.2.1.tgz\",\"integrity\":\"sha1-tDLdM1i2NM914eRmQ2gkBTPB3b4=\",\"dev\":true},\"anymatch\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmjs.org/anymatch/-/anymatch-3.1.2.tgz\",\"integrity\":\"sha512-P43ePfOAIupkguHUycrc4qJ9kz8ZiuOUijaETwX7THt0Y/GNK7v0aa8rY816xWjZ7rJdA5XdMcpVFTKMq+RvWg==\",\"dev\":true,\"requires\":{\"normalize-path\":\"^3.0.0\",\"picomatch\":\"^2.0.4\"}},\"arraybuffer.slice\":{\"version\":\"0.0.7\",\"resolved\":\"https://registry.npmjs.org/arraybuffer.slice/-/arraybuffer.slice-0.0.7.tgz\",\"integrity\":\"sha512-wGUIVQXuehL5TCqQun8OW81jGzAWycqzFF8lFp+GOM5BXLYj3bKNsYC4daB7n6XjCqxQA/qgTJ+8ANR3acjrog==\",\"dev\":true},\"async\":{\"version\":\"1.5.2\",\"resolved\":\"https://registry.npmjs.org/async/-/async-1.5.2.tgz\",\"integrity\":\"sha1-7GphrlZIDAw8skHJVhjiCJL5Zyo=\",\"dev\":true},\"async-each-series\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmjs.org/async-each-series/-/async-each-series-0.1.1.tgz\",\"integrity\":\"sha1-dhfBkXQB/Yykooqtzj266Yr+tDI=\",\"dev\":true},\"axios\":{\"version\":\"0.21.1\",\"resolved\":\"https://registry.npmjs.org/axios/-/axios-0.21.1.tgz\",\"integrity\":\"sha512-dKQiRHxGD9PPRIUNIWvZhPTPpl1rf/OxTYKsqKUDjBwYylTvV7SjSHJb9ratfyzM6wCdLCOYLzs73qpg5c4iGA==\",\"dev\":true,\"requires\":{\"follow-redirects\":\"^1.10.0\"}},\"backo2\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmjs.org/backo2/-/backo2-1.0.2.tgz\",\"integrity\":\"sha1-MasayLEpNjRj41s+u2n038+6eUc=\",\"dev\":true},\"balanced-match\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\"integrity\":\"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\"dev\":true},\"base64-arraybuffer\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-0.1.4.tgz\",\"integrity\":\"sha1-mBjHngWbE1X5fgQooBfIOOkLqBI=\",\"dev\":true},\"base64id\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz\",\"integrity\":\"sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==\",\"dev\":true},\"batch\":{\"version\":\"0.6.1\",\"resolved\":\"https://registry.npmjs.org/batch/-/batch-0.6.1.tgz\",\"integrity\":\"sha1-3DQxT05nkxgJP8dgJyUl+UvyXBY=\",\"dev\":true},\"binary-extensions\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz\",\"integrity\":\"sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==\",\"dev\":true},\"blob\":{\"version\":\"0.0.5\",\"resolved\":\"https://registry.npmjs.org/blob/-/blob-0.0.5.tgz\",\"integrity\":\"sha512-gaqbzQPqOoamawKg0LGVd7SzLgXS+JH61oWprSLH+P+abTczqJbhTR8CmJ2u9/bUYNmHTGJx/UEmn6doAvvuig==\",\"dev\":true},\"brace-expansion\":{\"version\":\"1.1.11\",\"resolved\":\"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\"integrity\":\"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\"dev\":true,\"requires\":{\"balanced-match\":\"^1.0.0\",\"concat-map\":\"0.0.1\"}},\"braces\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmjs.org/braces/-/braces-3.0.2.tgz\",\"integrity\":\"sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==\",\"dev\":true,\"requires\":{\"fill-range\":\"^7.0.1\"}},\"browser-sync\":{\"version\":\"2.27.4\",\"resolved\":\"https://registry.npmjs.org/browser-sync/-/browser-sync-2.27.4.tgz\",\"integrity\":\"sha512-zgjrI6oUXxLa671SxVmWfIH+XiG6yZiGuvsQ1huuGEBlKkWuBVKgYjh+j9kagKm891FARgmK4Ct4PAhckLKaYg==\",\"dev\":true,\"requires\":{\"browser-sync-client\":\"^2.27.4\",\"browser-sync-ui\":\"^2.27.4\",\"bs-recipes\":\"1.3.4\",\"bs-snippet-injector\":\"^2.0.1\",\"chokidar\":\"^3.5.1\",\"connect\":\"3.6.6\",\"connect-history-api-fallback\":\"^1\",\"dev-ip\":\"^1.0.1\",\"easy-extender\":\"^2.3.4\",\"eazy-logger\":\"3.1.0\",\"etag\":\"^1.8.1\",\"fresh\":\"^0.5.2\",\"fs-extra\":\"3.0.1\",\"http-proxy\":\"^1.18.1\",\"immutable\":\"^3\",\"localtunnel\":\"^2.0.1\",\"micromatch\":\"^4.0.2\",\"opn\":\"5.3.0\",\"portscanner\":\"2.1.1\",\"qs\":\"6.2.3\",\"raw-body\":\"^2.3.2\",\"resp-modifier\":\"6.0.2\",\"rx\":\"4.1.0\",\"send\":\"0.16.2\",\"serve-index\":\"1.9.1\",\"serve-static\":\"1.13.2\",\"server-destroy\":\"1.0.1\",\"socket.io\":\"2.4.0\",\"ua-parser-js\":\"^0.7.28\",\"yargs\":\"^15.4.1\"}},\"browser-sync-client\":{\"version\":\"2.27.4\",\"resolved\":\"https://registry.npmjs.org/browser-sync-client/-/browser-sync-client-2.27.4.tgz\",\"integrity\":\"sha512-l0krAGZnpLaD+tUYdM25WeS4FP73ZoPeaxlVzOvmtL9uKSlvpmywsnDwa3PJzc3ubmDPAcD74ifJjl6MmVksXw==\",\"dev\":true,\"requires\":{\"etag\":\"1.8.1\",\"fresh\":\"0.5.2\",\"mitt\":\"^1.1.3\",\"rxjs\":\"^5.5.6\"}},\"browser-sync-ui\":{\"version\":\"2.27.4\",\"resolved\":\"https://registry.npmjs.org/browser-sync-ui/-/browser-sync-ui-2.27.4.tgz\",\"integrity\":\"sha512-E58Mb6ycz57Nm393oqVJj4jxuLJH3MhZnY8AV+zd9LsNVGZjrKRNNIw5JPYYguyb37ZjLjq2x4u+38mRv3Sb7g==\",\"dev\":true,\"requires\":{\"async-each-series\":\"0.1.1\",\"connect-history-api-fallback\":\"^1\",\"immutable\":\"^3\",\"server-destroy\":\"1.0.1\",\"socket.io-client\":\"^2.4.0\",\"stream-throttle\":\"^0.1.3\"}},\"bs-recipes\":{\"version\":\"1.3.4\",\"resolved\":\"https://registry.npmjs.org/bs-recipes/-/bs-recipes-1.3.4.tgz\",\"integrity\":\"sha1-DS1NSKcYyMBEdp/cT4lZLci2lYU=\",\"dev\":true},\"bs-snippet-injector\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmjs.org/bs-snippet-injector/-/bs-snippet-injector-2.0.1.tgz\",\"integrity\":\"sha1-YbU5PxH1JVntEgaTEANDtu2wTdU=\",\"dev\":true},\"bytes\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmjs.org/bytes/-/bytes-3.1.0.tgz\",\"integrity\":\"sha512-zauLjrfCG+xvoyaqLoV8bLVXXNGC4JqlxFCutSDWA6fJrTo2ZuvLYTqZ7aHBLZSMOopbzwv8f+wZcVzfVTI2Dg==\",\"dev\":true},\"camelcase\":{\"version\":\"5.3.1\",\"resolved\":\"https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz\",\"integrity\":\"sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==\",\"dev\":true},\"chalk\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz\",\"integrity\":\"sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^2.2.1\",\"escape-string-regexp\":\"^1.0.2\",\"has-ansi\":\"^2.0.0\",\"strip-ansi\":\"^3.0.0\",\"supports-color\":\"^2.0.0\"}},\"chokidar\":{\"version\":\"3.5.2\",\"resolved\":\"https://registry.npmjs.org/chokidar/-/chokidar-3.5.2.tgz\",\"integrity\":\"sha512-ekGhOnNVPgT77r4K/U3GDhu+FQ2S8TnK/s2KbIGXi0SZWuwkZ2QNyfWdZW+TVfn84DpEP7rLeCt2UI6bJ8GwbQ==\",\"dev\":true,\"requires\":{\"anymatch\":\"~3.1.2\",\"braces\":\"~3.0.2\",\"fsevents\":\"~2.3.2\",\"glob-parent\":\"~5.1.2\",\"is-binary-path\":\"~2.1.0\",\"is-glob\":\"~4.0.1\",\"normalize-path\":\"~3.0.0\",\"readdirp\":\"~3.6.0\"}},\"cliui\":{\"version\":\"7.0.4\",\"resolved\":\"https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz\",\"integrity\":\"sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==\",\"dev\":true,\"requires\":{\"string-width\":\"^4.2.0\",\"strip-ansi\":\"^6.0.0\",\"wrap-ansi\":\"^7.0.0\"},\"dependencies\":{\"ansi-regex\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz\",\"integrity\":\"sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==\",\"dev\":true},\"strip-ansi\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz\",\"integrity\":\"sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^5.0.0\"}}}},\"color-convert\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\"integrity\":\"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\"dev\":true,\"requires\":{\"color-name\":\"~1.1.4\"}},\"color-name\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\"integrity\":\"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\"dev\":true},\"commander\":{\"version\":\"2.20.3\",\"resolved\":\"https://registry.npmjs.org/commander/-/commander-2.20.3.tgz\",\"integrity\":\"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\"dev\":true},\"component-bind\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmjs.org/component-bind/-/component-bind-1.0.0.tgz\",\"integrity\":\"sha1-AMYIq33Nk4l8AAllGx06jh5zu9E=\",\"dev\":true},\"component-emitter\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.0.tgz\",\"integrity\":\"sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==\",\"dev\":true},\"component-inherit\":{\"version\":\"0.0.3\",\"resolved\":\"https://registry.npmjs.org/component-inherit/-/component-inherit-0.0.3.tgz\",\"integrity\":\"sha1-ZF/ErfWLcrZJ1crmUTVhnbJv8UM=\",\"dev\":true},\"concat-map\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\"integrity\":\"sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=\",\"dev\":true},\"connect\":{\"version\":\"3.6.6\",\"resolved\":\"https://registry.npmjs.org/connect/-/connect-3.6.6.tgz\",\"integrity\":\"sha1-Ce/2xVr3I24TcTWnJXSFi2eG9SQ=\",\"dev\":true,\"requires\":{\"debug\":\"2.6.9\",\"finalhandler\":\"1.1.0\",\"parseurl\":\"~1.3.2\",\"utils-merge\":\"1.0.1\"},\"dependencies\":{\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}}}},\"connect-history-api-fallback\":{\"version\":\"1.6.0\",\"resolved\":\"https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-1.6.0.tgz\",\"integrity\":\"sha512-e54B99q/OUoH64zYYRf3HBP5z24G38h5D3qXu23JGRoigpX5Ss4r9ZnDk3g0Z8uQC2x2lPaJ+UlWBc1ZWBWdLg==\",\"dev\":true},\"connect-logger\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmjs.org/connect-logger/-/connect-logger-0.0.1.tgz\",\"integrity\":\"sha1-TZmZeKHSC7RgjnzUNNdBZSJVF0s=\",\"dev\":true,\"requires\":{\"moment\":\"*\"}},\"cookie\":{\"version\":\"0.4.1\",\"resolved\":\"https://registry.npmjs.org/cookie/-/cookie-0.4.1.tgz\",\"integrity\":\"sha512-ZwrFkGJxUR3EIoXtO+yVE69Eb7KlixbaeAWfBQB9vVsNn/o+Yw69gBWSSDK825hQNdN+wF8zELf3dFNl/kxkUA==\",\"dev\":true},\"debug\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-3.1.0.tgz\",\"integrity\":\"sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}},\"decamelize\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz\",\"integrity\":\"sha1-9lNNFRSCabIDUue+4m9QH5oZEpA=\",\"dev\":true},\"depd\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmjs.org/depd/-/depd-1.1.2.tgz\",\"integrity\":\"sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak=\",\"dev\":true},\"destroy\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz\",\"integrity\":\"sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA=\",\"dev\":true},\"dev-ip\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmjs.org/dev-ip/-/dev-ip-1.0.1.tgz\",\"integrity\":\"sha1-p2o+0YVb56ASu4rBbLgPPADcKPA=\",\"dev\":true},\"dlv\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz\",\"integrity\":\"sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==\",\"dev\":true},\"easy-extender\":{\"version\":\"2.3.4\",\"resolved\":\"https://registry.npmjs.org/easy-extender/-/easy-extender-2.3.4.tgz\",\"integrity\":\"sha512-8cAwm6md1YTiPpOvDULYJL4ZS6WfM5/cTeVVh4JsvyYZAoqlRVUpHL9Gr5Fy7HA6xcSZicUia3DeAgO3Us8E+Q==\",\"dev\":true,\"requires\":{\"lodash\":\"^4.17.10\"}},\"eazy-logger\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmjs.org/eazy-logger/-/eazy-logger-3.1.0.tgz\",\"integrity\":\"sha512-/snsn2JqBtUSSstEl4R0RKjkisGHAhvYj89i7r3ytNUKW12y178KDZwXLXIgwDqLW6E/VRMT9qfld7wvFae8bQ==\",\"dev\":true,\"requires\":{\"tfunk\":\"^4.0.0\"}},\"ee-first\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz\",\"integrity\":\"sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0=\",\"dev\":true},\"emoji-regex\":{\"version\":\"8.0.0\",\"resolved\":\"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\"integrity\":\"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\",\"dev\":true},\"encodeurl\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz\",\"integrity\":\"sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k=\",\"dev\":true},\"engine.io\":{\"version\":\"3.5.0\",\"resolved\":\"https://registry.npmjs.org/engine.io/-/engine.io-3.5.0.tgz\",\"integrity\":\"sha512-21HlvPUKaitDGE4GXNtQ7PLP0Sz4aWLddMPw2VTyFz1FVZqu/kZsJUO8WNpKuE/OCL7nkfRaOui2ZCJloGznGA==\",\"dev\":true,\"requires\":{\"accepts\":\"~1.3.4\",\"base64id\":\"2.0.0\",\"cookie\":\"~0.4.1\",\"debug\":\"~4.1.0\",\"engine.io-parser\":\"~2.2.0\",\"ws\":\"~7.4.2\"},\"dependencies\":{\"debug\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-4.1.1.tgz\",\"integrity\":\"sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==\",\"dev\":true,\"requires\":{\"ms\":\"^2.1.1\"}},\"ms\":{\"version\":\"2.1.3\",\"resolved\":\"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\"integrity\":\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\"dev\":true}}},\"engine.io-client\":{\"version\":\"3.5.2\",\"resolved\":\"https://registry.npmjs.org/engine.io-client/-/engine.io-client-3.5.2.tgz\",\"integrity\":\"sha512-QEqIp+gJ/kMHeUun7f5Vv3bteRHppHH/FMBQX/esFj/fuYfjyUKWGMo3VCvIP/V8bE9KcjHmRZrhIz2Z9oNsDA==\",\"dev\":true,\"requires\":{\"component-emitter\":\"~1.3.0\",\"component-inherit\":\"0.0.3\",\"debug\":\"~3.1.0\",\"engine.io-parser\":\"~2.2.0\",\"has-cors\":\"1.1.0\",\"indexof\":\"0.0.1\",\"parseqs\":\"0.0.6\",\"parseuri\":\"0.0.6\",\"ws\":\"~7.4.2\",\"xmlhttprequest-ssl\":\"~1.6.2\",\"yeast\":\"0.1.2\"}},\"engine.io-parser\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-2.2.1.tgz\",\"integrity\":\"sha512-x+dN/fBH8Ro8TFwJ+rkB2AmuVw9Yu2mockR/p3W8f8YtExwFgDvBDi0GWyb4ZLkpahtDGZgtr3zLovanJghPqg==\",\"dev\":true,\"requires\":{\"after\":\"0.8.2\",\"arraybuffer.slice\":\"~0.0.7\",\"base64-arraybuffer\":\"0.1.4\",\"blob\":\"0.0.5\",\"has-binary2\":\"~1.0.2\"}},\"escalade\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz\",\"integrity\":\"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\",\"dev\":true},\"escape-html\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz\",\"integrity\":\"sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg=\",\"dev\":true},\"escape-string-regexp\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\"integrity\":\"sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=\",\"dev\":true},\"etag\":{\"version\":\"1.8.1\",\"resolved\":\"https://registry.npmjs.org/etag/-/etag-1.8.1.tgz\",\"integrity\":\"sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc=\",\"dev\":true},\"eventemitter3\":{\"version\":\"4.0.7\",\"resolved\":\"https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz\",\"integrity\":\"sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==\",\"dev\":true},\"fill-range\":{\"version\":\"7.0.1\",\"resolved\":\"https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz\",\"integrity\":\"sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==\",\"dev\":true,\"requires\":{\"to-regex-range\":\"^5.0.1\"}},\"finalhandler\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.0.tgz\",\"integrity\":\"sha1-zgtoVbRYU+eRsvzGgARtiCU91/U=\",\"dev\":true,\"requires\":{\"debug\":\"2.6.9\",\"encodeurl\":\"~1.0.1\",\"escape-html\":\"~1.0.3\",\"on-finished\":\"~2.3.0\",\"parseurl\":\"~1.3.2\",\"statuses\":\"~1.3.1\",\"unpipe\":\"~1.0.0\"},\"dependencies\":{\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}}}},\"find-up\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz\",\"integrity\":\"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\"dev\":true,\"requires\":{\"locate-path\":\"^5.0.0\",\"path-exists\":\"^4.0.0\"}},\"follow-redirects\":{\"version\":\"1.14.1\",\"resolved\":\"https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.14.1.tgz\",\"integrity\":\"sha512-HWqDgT7ZEkqRzBvc2s64vSZ/hfOceEol3ac/7tKwzuvEyWx3/4UegXh5oBOIotkGsObyk3xznnSRVADBgWSQVg==\",\"dev\":true},\"fresh\":{\"version\":\"0.5.2\",\"resolved\":\"https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz\",\"integrity\":\"sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac=\",\"dev\":true},\"fs-extra\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmjs.org/fs-extra/-/fs-extra-3.0.1.tgz\",\"integrity\":\"sha1-N5TzeMWLNC6n27sjCVEJxLO2IpE=\",\"dev\":true,\"requires\":{\"graceful-fs\":\"^4.1.2\",\"jsonfile\":\"^3.0.0\",\"universalify\":\"^0.1.0\"}},\"fsevents\":{\"version\":\"2.3.2\",\"resolved\":\"https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz\",\"integrity\":\"sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==\",\"dev\":true,\"optional\":true},\"get-caller-file\":{\"version\":\"2.0.5\",\"resolved\":\"https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz\",\"integrity\":\"sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==\",\"dev\":true},\"glob-parent\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz\",\"integrity\":\"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\"dev\":true,\"requires\":{\"is-glob\":\"^4.0.1\"}},\"graceful-fs\":{\"version\":\"4.2.6\",\"resolved\":\"https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.6.tgz\",\"integrity\":\"sha512-nTnJ528pbqxYanhpDYsi4Rd8MAeaBA67+RZ10CM1m3bTAVFEDcd5AuA4a6W5YkGZ1iNXHzZz8T6TBKLeBuNriQ==\",\"dev\":true},\"has-ansi\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/has-ansi/-/has-ansi-2.0.0.tgz\",\"integrity\":\"sha1-NPUEnOHs3ysGSa8+8k5F7TVBbZE=\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^2.0.0\"}},\"has-binary2\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmjs.org/has-binary2/-/has-binary2-1.0.3.tgz\",\"integrity\":\"sha512-G1LWKhDSvhGeAQ8mPVQlqNcOB2sJdwATtZKl2pDKKHfpf/rYj24lkinxf69blJbnsvtqqNU+L3SL50vzZhXOnw==\",\"dev\":true,\"requires\":{\"isarray\":\"2.0.1\"}},\"has-cors\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmjs.org/has-cors/-/has-cors-1.1.0.tgz\",\"integrity\":\"sha1-XkdHk/fqmEPRu5nCPu9J/xJv/zk=\",\"dev\":true},\"http-errors\":{\"version\":\"1.7.3\",\"resolved\":\"https://registry.npmjs.org/http-errors/-/http-errors-1.7.3.tgz\",\"integrity\":\"sha512-ZTTX0MWrsQ2ZAhA1cejAwDLycFsd7I7nVtnkT3Ol0aqodaKW+0CTZDQ1uBv5whptCnc8e8HeRRJxRs0kmm/Qfw==\",\"dev\":true,\"requires\":{\"depd\":\"~1.1.2\",\"inherits\":\"2.0.4\",\"setprototypeof\":\"1.1.1\",\"statuses\":\">= 1.5.0 < 2\",\"toidentifier\":\"1.0.0\"},\"dependencies\":{\"statuses\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz\",\"integrity\":\"sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=\",\"dev\":true}}},\"http-proxy\":{\"version\":\"1.18.1\",\"resolved\":\"https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz\",\"integrity\":\"sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==\",\"dev\":true,\"requires\":{\"eventemitter3\":\"^4.0.0\",\"follow-redirects\":\"^1.0.0\",\"requires-port\":\"^1.0.0\"}},\"iconv-lite\":{\"version\":\"0.4.24\",\"resolved\":\"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\"integrity\":\"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\"dev\":true,\"requires\":{\"safer-buffer\":\">= 2.1.2 < 3\"}},\"immutable\":{\"version\":\"3.8.2\",\"resolved\":\"https://registry.npmjs.org/immutable/-/immutable-3.8.2.tgz\",\"integrity\":\"sha1-wkOZUUVbs5kT2vKBN28VMOEErfM=\",\"dev\":true},\"indexof\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmjs.org/indexof/-/indexof-0.0.1.tgz\",\"integrity\":\"sha1-gtwzbSMrkGIXnQWrMpOmYFn9Q10=\",\"dev\":true},\"inherits\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\"integrity\":\"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\"dev\":true},\"is-binary-path\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz\",\"integrity\":\"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\"dev\":true,\"requires\":{\"binary-extensions\":\"^2.0.0\"}},\"is-extglob\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz\",\"integrity\":\"sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=\",\"dev\":true},\"is-fullwidth-code-point\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\"integrity\":\"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\"dev\":true},\"is-glob\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmjs.org/is-glob/-/is-glob-4.0.1.tgz\",\"integrity\":\"sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==\",\"dev\":true,\"requires\":{\"is-extglob\":\"^2.1.1\"}},\"is-number\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz\",\"integrity\":\"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\"dev\":true},\"is-number-like\":{\"version\":\"1.0.8\",\"resolved\":\"https://registry.npmjs.org/is-number-like/-/is-number-like-1.0.8.tgz\",\"integrity\":\"sha512-6rZi3ezCyFcn5L71ywzz2bS5b2Igl1En3eTlZlvKjpz1n3IZLAYMbKYAIQgFmEu0GENg92ziU/faEOA/aixjbA==\",\"dev\":true,\"requires\":{\"lodash.isfinite\":\"^3.3.2\"}},\"is-wsl\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmjs.org/is-wsl/-/is-wsl-1.1.0.tgz\",\"integrity\":\"sha1-HxbkqiKwTRM2tmGIpmrzxgDDpm0=\",\"dev\":true},\"isarray\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmjs.org/isarray/-/isarray-2.0.1.tgz\",\"integrity\":\"sha1-o32U7ZzaLVmGXJ92/llu4fM4dB4=\",\"dev\":true},\"jsonfile\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmjs.org/jsonfile/-/jsonfile-3.0.1.tgz\",\"integrity\":\"sha1-pezG9l9T9mLEQVx2daAzHQmS7GY=\",\"dev\":true,\"requires\":{\"graceful-fs\":\"^4.1.6\"}},\"limiter\":{\"version\":\"1.1.5\",\"resolved\":\"https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz\",\"integrity\":\"sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA==\",\"dev\":true},\"lite-server\":{\"version\":\"2.6.1\",\"resolved\":\"https://registry.npmjs.org/lite-server/-/lite-server-2.6.1.tgz\",\"integrity\":\"sha512-d3oyB/C8AU4EwYQHlLxcu6vTQDnCaLb81v1KKNYABmFS5oeJ11A+YxlqtpbTclID1AFddJfcB5klf0q98vYIMw==\",\"dev\":true,\"requires\":{\"browser-sync\":\"^2.26.13\",\"connect-history-api-fallback\":\"^1.6.0\",\"connect-logger\":\"^0.0.1\",\"lodash\":\"^4.17.20\",\"minimist\":\"^1.2.5\"}},\"localtunnel\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmjs.org/localtunnel/-/localtunnel-2.0.1.tgz\",\"integrity\":\"sha512-LiaI5wZdz0xFkIQpXbNI62ZnNn8IMsVhwxHmhA+h4vj8R9JG/07bQHWwQlyy7b95/5fVOCHJfIHv+a5XnkvaJA==\",\"dev\":true,\"requires\":{\"axios\":\"0.21.1\",\"debug\":\"4.3.1\",\"openurl\":\"1.1.1\",\"yargs\":\"16.2.0\"},\"dependencies\":{\"debug\":{\"version\":\"4.3.1\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-4.3.1.tgz\",\"integrity\":\"sha512-doEwdvm4PCeK4K3RQN2ZC2BYUBaxwLARCqZmMjtF8a51J2Rb0xpVloFRnCODwqjpwnAoao4pelN8l3RJdv3gRQ==\",\"dev\":true,\"requires\":{\"ms\":\"2.1.2\"}},\"ms\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmjs.org/ms/-/ms-2.1.2.tgz\",\"integrity\":\"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\"dev\":true},\"yargs\":{\"version\":\"16.2.0\",\"resolved\":\"https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz\",\"integrity\":\"sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==\",\"dev\":true,\"requires\":{\"cliui\":\"^7.0.2\",\"escalade\":\"^3.1.1\",\"get-caller-file\":\"^2.0.5\",\"require-directory\":\"^2.1.1\",\"string-width\":\"^4.2.0\",\"y18n\":\"^5.0.5\",\"yargs-parser\":\"^20.2.2\"}}}},\"locate-path\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz\",\"integrity\":\"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\"dev\":true,\"requires\":{\"p-locate\":\"^4.1.0\"}},\"lodash\":{\"version\":\"4.17.21\",\"resolved\":\"https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz\",\"integrity\":\"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\",\"dev\":true},\"lodash.isfinite\":{\"version\":\"3.3.2\",\"resolved\":\"https://registry.npmjs.org/lodash.isfinite/-/lodash.isfinite-3.3.2.tgz\",\"integrity\":\"sha1-+4m2WpqAKBgz8LdHizpRBPiY67M=\",\"dev\":true},\"micromatch\":{\"version\":\"4.0.4\",\"resolved\":\"https://registry.npmjs.org/micromatch/-/micromatch-4.0.4.tgz\",\"integrity\":\"sha512-pRmzw/XUcwXGpD9aI9q/0XOwLNygjETJ8y0ao0wdqprrzDa4YnxLcz7fQRZr8voh8V10kGhABbNcHVk5wHgWwg==\",\"dev\":true,\"requires\":{\"braces\":\"^3.0.1\",\"picomatch\":\"^2.2.3\"}},\"mime\":{\"version\":\"1.4.1\",\"resolved\":\"https://registry.npmjs.org/mime/-/mime-1.4.1.tgz\",\"integrity\":\"sha512-KI1+qOZu5DcW6wayYHSzR/tXKCDC5Om4s1z2QJjDULzLcmf3DvzS7oluY4HCTrc+9FiKmWUgeNLg7W3uIQvxtQ==\",\"dev\":true},\"mime-db\":{\"version\":\"1.48.0\",\"resolved\":\"https://registry.npmjs.org/mime-db/-/mime-db-1.48.0.tgz\",\"integrity\":\"sha512-FM3QwxV+TnZYQ2aRqhlKBMHxk10lTbMt3bBkMAp54ddrNeVSfcQYOOKuGuy3Ddrm38I04If834fOUSq1yzslJQ==\",\"dev\":true},\"mime-types\":{\"version\":\"2.1.31\",\"resolved\":\"https://registry.npmjs.org/mime-types/-/mime-types-2.1.31.tgz\",\"integrity\":\"sha512-XGZnNzm3QvgKxa8dpzyhFTHmpP3l5YNusmne07VUOXxou9CqUqYa/HBy124RqtVh/O2pECas/MOcsDgpilPOPg==\",\"dev\":true,\"requires\":{\"mime-db\":\"1.48.0\"}},\"minimatch\":{\"version\":\"3.0.4\",\"resolved\":\"https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz\",\"integrity\":\"sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==\",\"dev\":true,\"requires\":{\"brace-expansion\":\"^1.1.7\"}},\"minimist\":{\"version\":\"1.2.5\",\"resolved\":\"https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz\",\"integrity\":\"sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==\",\"dev\":true},\"mitt\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmjs.org/mitt/-/mitt-1.2.0.tgz\",\"integrity\":\"sha512-r6lj77KlwqLhIUku9UWYes7KJtsczvolZkzp8hbaDPPaE24OmWl5s539Mytlj22siEQKosZ26qCBgda2PKwoJw==\",\"dev\":true},\"moment\":{\"version\":\"2.29.1\",\"resolved\":\"https://registry.npmjs.org/moment/-/moment-2.29.1.tgz\",\"integrity\":\"sha512-kHmoybcPV8Sqy59DwNDY3Jefr64lK/by/da0ViFcuA4DH0vQg5Q6Ze5VimxkfQNSC+Mls/Kx53s7TjP1RhFEDQ==\",\"dev\":true},\"ms\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/ms/-/ms-2.0.0.tgz\",\"integrity\":\"sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g=\",\"dev\":true},\"negotiator\":{\"version\":\"0.6.2\",\"resolved\":\"https://registry.npmjs.org/negotiator/-/negotiator-0.6.2.tgz\",\"integrity\":\"sha512-hZXc7K2e+PgeI1eDBe/10Ard4ekbfrrqG8Ep+8Jmf4JID2bNg7NvCPOZN+kfF574pFQI7mum2AUqDidoKqcTOw==\",\"dev\":true},\"normalize-path\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz\",\"integrity\":\"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\"dev\":true},\"on-finished\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz\",\"integrity\":\"sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=\",\"dev\":true,\"requires\":{\"ee-first\":\"1.1.1\"}},\"openurl\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmjs.org/openurl/-/openurl-1.1.1.tgz\",\"integrity\":\"sha1-OHW0sO96UsFW8NtB1GCduw+Us4c=\",\"dev\":true},\"opn\":{\"version\":\"5.3.0\",\"resolved\":\"https://registry.npmjs.org/opn/-/opn-5.3.0.tgz\",\"integrity\":\"sha512-bYJHo/LOmoTd+pfiYhfZDnf9zekVJrY+cnS2a5F2x+w5ppvTqObojTP7WiFG+kVZs9Inw+qQ/lw7TroWwhdd2g==\",\"dev\":true,\"requires\":{\"is-wsl\":\"^1.1.0\"}},\"p-limit\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz\",\"integrity\":\"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\"dev\":true,\"requires\":{\"p-try\":\"^2.0.0\"}},\"p-locate\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz\",\"integrity\":\"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\"dev\":true,\"requires\":{\"p-limit\":\"^2.2.0\"}},\"p-try\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz\",\"integrity\":\"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\",\"dev\":true},\"parseqs\":{\"version\":\"0.0.6\",\"resolved\":\"https://registry.npmjs.org/parseqs/-/parseqs-0.0.6.tgz\",\"integrity\":\"sha512-jeAGzMDbfSHHA091hr0r31eYfTig+29g3GKKE/PPbEQ65X0lmMwlEoqmhzu0iztID5uJpZsFlUPDP8ThPL7M8w==\",\"dev\":true},\"parseuri\":{\"version\":\"0.0.6\",\"resolved\":\"https://registry.npmjs.org/parseuri/-/parseuri-0.0.6.tgz\",\"integrity\":\"sha512-AUjen8sAkGgao7UyCX6Ahv0gIK2fABKmYjvP4xmy5JaKvcbTRueIqIPHLAfq30xJddqSE033IOMUSOMCcK3Sow==\",\"dev\":true},\"parseurl\":{\"version\":\"1.3.3\",\"resolved\":\"https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz\",\"integrity\":\"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\"dev\":true},\"path-exists\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz\",\"integrity\":\"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\",\"dev\":true},\"picomatch\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmjs.org/picomatch/-/picomatch-2.3.0.tgz\",\"integrity\":\"sha512-lY1Q/PiJGC2zOv/z391WOTD+Z02bCgsFfvxoXXf6h7kv9o+WmsmzYqrAwY63sNgOxE4xEdq0WyUnXfKeBrSvYw==\",\"dev\":true},\"portscanner\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmjs.org/portscanner/-/portscanner-2.1.1.tgz\",\"integrity\":\"sha1-6rtAnk3iSVD1oqUW01rnaTQ/u5Y=\",\"dev\":true,\"requires\":{\"async\":\"1.5.2\",\"is-number-like\":\"^1.0.3\"}},\"qs\":{\"version\":\"6.2.3\",\"resolved\":\"https://registry.npmjs.org/qs/-/qs-6.2.3.tgz\",\"integrity\":\"sha1-HPyyXBCpsrSDBT/zn138kjOQjP4=\",\"dev\":true},\"range-parser\":{\"version\":\"1.2.1\",\"resolved\":\"https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz\",\"integrity\":\"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\"dev\":true},\"raw-body\":{\"version\":\"2.4.1\",\"resolved\":\"https://registry.npmjs.org/raw-body/-/raw-body-2.4.1.tgz\",\"integrity\":\"sha512-9WmIKF6mkvA0SLmA2Knm9+qj89e+j1zqgyn8aXGd7+nAduPoqgI9lO57SAZNn/Byzo5P7JhXTyg9PzaJbH73bA==\",\"dev\":true,\"requires\":{\"bytes\":\"3.1.0\",\"http-errors\":\"1.7.3\",\"iconv-lite\":\"0.4.24\",\"unpipe\":\"1.0.0\"}},\"readdirp\":{\"version\":\"3.6.0\",\"resolved\":\"https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz\",\"integrity\":\"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\"dev\":true,\"requires\":{\"picomatch\":\"^2.2.1\"}},\"require-directory\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz\",\"integrity\":\"sha1-jGStX9MNqxyXbiNE/+f3kqam30I=\",\"dev\":true},\"require-main-filename\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz\",\"integrity\":\"sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==\",\"dev\":true},\"requires-port\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz\",\"integrity\":\"sha1-kl0mAdOaxIXgkc8NpcbmlNw9yv8=\",\"dev\":true},\"resp-modifier\":{\"version\":\"6.0.2\",\"resolved\":\"https://registry.npmjs.org/resp-modifier/-/resp-modifier-6.0.2.tgz\",\"integrity\":\"sha1-sSTeXE+6/LpUH0j/pzlw9KpFa08=\",\"dev\":true,\"requires\":{\"debug\":\"^2.2.0\",\"minimatch\":\"^3.0.2\"},\"dependencies\":{\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}}}},\"rx\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmjs.org/rx/-/rx-4.1.0.tgz\",\"integrity\":\"sha1-pfE/957zt0D+MKqAP7CfmIBdR4I=\",\"dev\":true},\"rxjs\":{\"version\":\"5.5.12\",\"resolved\":\"https://registry.npmjs.org/rxjs/-/rxjs-5.5.12.tgz\",\"integrity\":\"sha512-xx2itnL5sBbqeeiVgNPVuQQ1nC8Jp2WfNJhXWHmElW9YmrpS9UVnNzhP3EH3HFqexO5Tlp8GhYY+WEcqcVMvGw==\",\"dev\":true,\"requires\":{\"symbol-observable\":\"1.0.1\"}},\"safer-buffer\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\"integrity\":\"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\"dev\":true},\"send\":{\"version\":\"0.16.2\",\"resolved\":\"https://registry.npmjs.org/send/-/send-0.16.2.tgz\",\"integrity\":\"sha512-E64YFPUssFHEFBvpbbjr44NCLtI1AohxQ8ZSiJjQLskAdKuriYEP6VyGEsRDH8ScozGpkaX1BGvhanqCwkcEZw==\",\"dev\":true,\"requires\":{\"debug\":\"2.6.9\",\"depd\":\"~1.1.2\",\"destroy\":\"~1.0.4\",\"encodeurl\":\"~1.0.2\",\"escape-html\":\"~1.0.3\",\"etag\":\"~1.8.1\",\"fresh\":\"0.5.2\",\"http-errors\":\"~1.6.2\",\"mime\":\"1.4.1\",\"ms\":\"2.0.0\",\"on-finished\":\"~2.3.0\",\"range-parser\":\"~1.2.0\",\"statuses\":\"~1.4.0\"},\"dependencies\":{\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}},\"http-errors\":{\"version\":\"1.6.3\",\"resolved\":\"https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz\",\"integrity\":\"sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=\",\"dev\":true,\"requires\":{\"depd\":\"~1.1.2\",\"inherits\":\"2.0.3\",\"setprototypeof\":\"1.1.0\",\"statuses\":\">= 1.4.0 < 2\"}},\"inherits\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\"integrity\":\"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\",\"dev\":true},\"setprototypeof\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz\",\"integrity\":\"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\",\"dev\":true},\"statuses\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmjs.org/statuses/-/statuses-1.4.0.tgz\",\"integrity\":\"sha512-zhSCtt8v2NDrRlPQpCNtw/heZLtfUDqxBM1udqikb/Hbk52LK4nQSwr10u77iopCW5LsyHpuXS0GnEc48mLeew==\",\"dev\":true}}},\"serve-index\":{\"version\":\"1.9.1\",\"resolved\":\"https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz\",\"integrity\":\"sha1-03aNabHn2C5c4FD/9bRTvqEqkjk=\",\"dev\":true,\"requires\":{\"accepts\":\"~1.3.4\",\"batch\":\"0.6.1\",\"debug\":\"2.6.9\",\"escape-html\":\"~1.0.3\",\"http-errors\":\"~1.6.2\",\"mime-types\":\"~2.1.17\",\"parseurl\":\"~1.3.2\"},\"dependencies\":{\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}},\"http-errors\":{\"version\":\"1.6.3\",\"resolved\":\"https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz\",\"integrity\":\"sha1-i1VoC7S+KDoLW/TqLjhYC+HZMg0=\",\"dev\":true,\"requires\":{\"depd\":\"~1.1.2\",\"inherits\":\"2.0.3\",\"setprototypeof\":\"1.1.0\",\"statuses\":\">= 1.4.0 < 2\"}},\"inherits\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz\",\"integrity\":\"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\",\"dev\":true},\"setprototypeof\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz\",\"integrity\":\"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\",\"dev\":true},\"statuses\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz\",\"integrity\":\"sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow=\",\"dev\":true}}},\"serve-static\":{\"version\":\"1.13.2\",\"resolved\":\"https://registry.npmjs.org/serve-static/-/serve-static-1.13.2.tgz\",\"integrity\":\"sha512-p/tdJrO4U387R9oMjb1oj7qSMaMfmOyd4j9hOFoxZe2baQszgHcSWjuya/CiT5kgZZKRudHNOA0pYXOl8rQ5nw==\",\"dev\":true,\"requires\":{\"encodeurl\":\"~1.0.2\",\"escape-html\":\"~1.0.3\",\"parseurl\":\"~1.3.2\",\"send\":\"0.16.2\"}},\"server-destroy\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmjs.org/server-destroy/-/server-destroy-1.0.1.tgz\",\"integrity\":\"sha1-8Tv5KOQrnD55OD5hzDmYtdFObN0=\",\"dev\":true},\"set-blocking\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz\",\"integrity\":\"sha1-BF+XgtARrppoA93TgrJDkrPYkPc=\",\"dev\":true},\"setprototypeof\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.1.tgz\",\"integrity\":\"sha512-JvdAWfbXeIGaZ9cILp38HntZSFSo3mWg6xGcJJsd+d4aRMOqauag1C63dJfDw7OaMYwEbHMOxEZ1lqVRYP2OAw==\",\"dev\":true},\"socket.io\":{\"version\":\"2.4.0\",\"resolved\":\"https://registry.npmjs.org/socket.io/-/socket.io-2.4.0.tgz\",\"integrity\":\"sha512-9UPJ1UTvKayuQfVv2IQ3k7tCQC/fboDyIK62i99dAQIyHKaBsNdTpwHLgKJ6guRWxRtC9H+138UwpaGuQO9uWQ==\",\"dev\":true,\"requires\":{\"debug\":\"~4.1.0\",\"engine.io\":\"~3.5.0\",\"has-binary2\":\"~1.0.2\",\"socket.io-adapter\":\"~1.1.0\",\"socket.io-client\":\"2.4.0\",\"socket.io-parser\":\"~3.4.0\"},\"dependencies\":{\"component-emitter\":{\"version\":\"1.2.1\",\"resolved\":\"https://registry.npmjs.org/component-emitter/-/component-emitter-1.2.1.tgz\",\"integrity\":\"sha1-E3kY1teCg/ffemt8WmPhQOaUJeY=\",\"dev\":true},\"debug\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmjs.org/debug/-/debug-4.1.1.tgz\",\"integrity\":\"sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==\",\"dev\":true,\"requires\":{\"ms\":\"^2.1.1\"}},\"ms\":{\"version\":\"2.1.3\",\"resolved\":\"https://registry.npmjs.org/ms/-/ms-2.1.3.tgz\",\"integrity\":\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\"dev\":true},\"socket.io-parser\":{\"version\":\"3.4.1\",\"resolved\":\"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.4.1.tgz\",\"integrity\":\"sha512-11hMgzL+WCLWf1uFtHSNvliI++tcRUWdoeYuwIl+Axvwy9z2gQM+7nJyN3STj1tLj5JyIUH8/gpDGxzAlDdi0A==\",\"dev\":true,\"requires\":{\"component-emitter\":\"1.2.1\",\"debug\":\"~4.1.0\",\"isarray\":\"2.0.1\"}}}},\"socket.io-adapter\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-1.1.2.tgz\",\"integrity\":\"sha512-WzZRUj1kUjrTIrUKpZLEzFZ1OLj5FwLlAFQs9kuZJzJi5DKdU7FsWc36SNmA8iDOtwBQyT8FkrriRM8vXLYz8g==\",\"dev\":true},\"socket.io-client\":{\"version\":\"2.4.0\",\"resolved\":\"https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.4.0.tgz\",\"integrity\":\"sha512-M6xhnKQHuuZd4Ba9vltCLT9oa+YvTsP8j9NcEiLElfIg8KeYPyhWOes6x4t+LTAC8enQbE/995AdTem2uNyKKQ==\",\"dev\":true,\"requires\":{\"backo2\":\"1.0.2\",\"component-bind\":\"1.0.0\",\"component-emitter\":\"~1.3.0\",\"debug\":\"~3.1.0\",\"engine.io-client\":\"~3.5.0\",\"has-binary2\":\"~1.0.2\",\"indexof\":\"0.0.1\",\"parseqs\":\"0.0.6\",\"parseuri\":\"0.0.6\",\"socket.io-parser\":\"~3.3.0\",\"to-array\":\"0.1.4\"}},\"socket.io-parser\":{\"version\":\"3.3.2\",\"resolved\":\"https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.3.2.tgz\",\"integrity\":\"sha512-FJvDBuOALxdCI9qwRrO/Rfp9yfndRtc1jSgVgV8FDraihmSP/MLGD5PEuJrNfjALvcQ+vMDM/33AWOYP/JSjDg==\",\"dev\":true,\"requires\":{\"component-emitter\":\"~1.3.0\",\"debug\":\"~3.1.0\",\"isarray\":\"2.0.1\"}},\"statuses\":{\"version\":\"1.3.1\",\"resolved\":\"https://registry.npmjs.org/statuses/-/statuses-1.3.1.tgz\",\"integrity\":\"sha1-+vUbnrdKrvOzrPStX2Gr8ky3uT4=\",\"dev\":true},\"stream-throttle\":{\"version\":\"0.1.3\",\"resolved\":\"https://registry.npmjs.org/stream-throttle/-/stream-throttle-0.1.3.tgz\",\"integrity\":\"sha1-rdV8jXzHOoFjDTHNVdOWHPr7qcM=\",\"dev\":true,\"requires\":{\"commander\":\"^2.2.0\",\"limiter\":\"^1.0.5\"}},\"string-width\":{\"version\":\"4.2.2\",\"resolved\":\"https://registry.npmjs.org/string-width/-/string-width-4.2.2.tgz\",\"integrity\":\"sha512-XBJbT3N4JhVumXE0eoLU9DCjcaF92KLNqTmFCnG1pf8duUxFGwtP6AD6nkjw9a3IdiRtL3E2w3JDiE/xi3vOeA==\",\"dev\":true,\"requires\":{\"emoji-regex\":\"^8.0.0\",\"is-fullwidth-code-point\":\"^3.0.0\",\"strip-ansi\":\"^6.0.0\"},\"dependencies\":{\"ansi-regex\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz\",\"integrity\":\"sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==\",\"dev\":true},\"strip-ansi\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz\",\"integrity\":\"sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^5.0.0\"}}}},\"strip-ansi\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\"integrity\":\"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^2.0.0\"}},\"supports-color\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/supports-color/-/supports-color-2.0.0.tgz\",\"integrity\":\"sha1-U10EXOa2Nj+kARcIRimZXp3zJMc=\",\"dev\":true},\"symbol-observable\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmjs.org/symbol-observable/-/symbol-observable-1.0.1.tgz\",\"integrity\":\"sha1-g0D8RwLDEi310iKI+IKD9RPT/dQ=\",\"dev\":true},\"tfunk\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmjs.org/tfunk/-/tfunk-4.0.0.tgz\",\"integrity\":\"sha512-eJQ0dGfDIzWNiFNYFVjJ+Ezl/GmwHaFTBTjrtqNPW0S7cuVDBrZrmzUz6VkMeCR4DZFqhd4YtLwsw3i2wYHswQ==\",\"dev\":true,\"requires\":{\"chalk\":\"^1.1.3\",\"dlv\":\"^1.1.3\"}},\"to-array\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmjs.org/to-array/-/to-array-0.1.4.tgz\",\"integrity\":\"sha1-F+bBH3PdTz10zaek/zI46a2b+JA=\",\"dev\":true},\"to-regex-range\":{\"version\":\"5.0.1\",\"resolved\":\"https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz\",\"integrity\":\"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\"dev\":true,\"requires\":{\"is-number\":\"^7.0.0\"}},\"toidentifier\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.0.tgz\",\"integrity\":\"sha512-yaOH/Pk/VEhBWWTlhI+qXxDFXlejDGcQipMlyxda9nthulaxLZUNcUqFxokp0vcYnvteJln5FNQDRrxj3YcbVw==\",\"dev\":true},\"ua-parser-js\":{\"version\":\"0.7.28\",\"resolved\":\"https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.28.tgz\",\"integrity\":\"sha512-6Gurc1n//gjp9eQNXjD9O3M/sMwVtN5S8Lv9bvOYBfKfDNiIIhqiyi01vMBO45u4zkDE420w/e0se7Vs+sIg+g==\",\"dev\":true},\"universalify\":{\"version\":\"0.1.2\",\"resolved\":\"https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz\",\"integrity\":\"sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==\",\"dev\":true},\"unpipe\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz\",\"integrity\":\"sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw=\",\"dev\":true},\"utils-merge\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz\",\"integrity\":\"sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM=\",\"dev\":true},\"which-module\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmjs.org/which-module/-/which-module-2.0.0.tgz\",\"integrity\":\"sha1-2e8H3Od7mQK4o6j6SzHD4/fm6Ho=\",\"dev\":true},\"wrap-ansi\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz\",\"integrity\":\"sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^4.0.0\",\"string-width\":\"^4.1.0\",\"strip-ansi\":\"^6.0.0\"},\"dependencies\":{\"ansi-regex\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz\",\"integrity\":\"sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==\",\"dev\":true},\"ansi-styles\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\"integrity\":\"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\"dev\":true,\"requires\":{\"color-convert\":\"^2.0.1\"}},\"strip-ansi\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz\",\"integrity\":\"sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^5.0.0\"}}}},\"ws\":{\"version\":\"7.4.6\",\"resolved\":\"https://registry.npmjs.org/ws/-/ws-7.4.6.tgz\",\"integrity\":\"sha512-YmhHDO4MzaDLB+M9ym/mDA5z0naX8j7SIlT8f8z+I0VtzsRbekxEutHSme7NPS2qE8StCYQNUnfWdXta/Yu85A==\",\"dev\":true},\"xmlhttprequest-ssl\":{\"version\":\"1.6.3\",\"resolved\":\"https://registry.npmjs.org/xmlhttprequest-ssl/-/xmlhttprequest-ssl-1.6.3.tgz\",\"integrity\":\"sha512-3XfeQE/wNkvrIktn2Kf0869fC0BN6UpydVasGIeSm2B1Llihf7/0UfZM+eCkOw3P7bP4+qPgqhm7ZoxuJtFU0Q==\",\"dev\":true},\"y18n\":{\"version\":\"5.0.8\",\"resolved\":\"https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz\",\"integrity\":\"sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==\",\"dev\":true},\"yargs\":{\"version\":\"15.4.1\",\"resolved\":\"https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz\",\"integrity\":\"sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==\",\"dev\":true,\"requires\":{\"cliui\":\"^6.0.0\",\"decamelize\":\"^1.2.0\",\"find-up\":\"^4.1.0\",\"get-caller-file\":\"^2.0.1\",\"require-directory\":\"^2.1.1\",\"require-main-filename\":\"^2.0.0\",\"set-blocking\":\"^2.0.0\",\"string-width\":\"^4.2.0\",\"which-module\":\"^2.0.0\",\"y18n\":\"^4.0.0\",\"yargs-parser\":\"^18.1.2\"},\"dependencies\":{\"ansi-regex\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz\",\"integrity\":\"sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==\",\"dev\":true},\"ansi-styles\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\"integrity\":\"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\"dev\":true,\"requires\":{\"color-convert\":\"^2.0.1\"}},\"cliui\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz\",\"integrity\":\"sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==\",\"dev\":true,\"requires\":{\"string-width\":\"^4.2.0\",\"strip-ansi\":\"^6.0.0\",\"wrap-ansi\":\"^6.2.0\"}},\"strip-ansi\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz\",\"integrity\":\"sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^5.0.0\"}},\"wrap-ansi\":{\"version\":\"6.2.0\",\"resolved\":\"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz\",\"integrity\":\"sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^4.0.0\",\"string-width\":\"^4.1.0\",\"strip-ansi\":\"^6.0.0\"}},\"y18n\":{\"version\":\"4.0.3\",\"resolved\":\"https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz\",\"integrity\":\"sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==\",\"dev\":true},\"yargs-parser\":{\"version\":\"18.1.3\",\"resolved\":\"https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz\",\"integrity\":\"sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==\",\"dev\":true,\"requires\":{\"camelcase\":\"^5.0.0\",\"decamelize\":\"^1.2.0\"}}}},\"yargs-parser\":{\"version\":\"20.2.9\",\"resolved\":\"https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz\",\"integrity\":\"sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==\",\"dev\":true},\"yeast\":{\"version\":\"0.1.2\",\"resolved\":\"https://registry.npmjs.org/yeast/-/yeast-0.1.2.tgz\",\"integrity\":\"sha1-AI4G2AlDIMNy28L47XagymyKxBk=\",\"dev\":true}}}"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/springcloud/nacos.html","permalink":"http://example.com/thinking/springcloud/nacos.html","excerpt":"","text":"1.参考：https://juejin.cn/post/6974921087922470926 启动： sh startup.sh -m standalone 2.bootstrap.yml文件配置 12345678910111213141516171819spring: application: #服务名称 name: naocs-service profiles: active: dev cloud: nacos: config: # 配置文件的环境 group: $&#123;spring.profiles.active&#125; # 配置文件的格式 file-extension: yaml # 配置中心的地址 server-addr: 47.105.198.54:8848 # 配置文件prefix prefix: $&#123;spring.application.name&#125; #命名空间 namespace: mall nacos线上配置 Data Id： $&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125; Group：按照环境进行划分，dev、test、prod"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/实践/docker分布式部署实践.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/docker%E5%88%86%E5%B8%83%E5%BC%8F%E9%83%A8%E7%BD%B2%E5%AE%9E%E8%B7%B5.html","excerpt":"","text":"Zipkin + ske：分布式日志追踪"},{"title":"","date":"2022-01-07T07:42:22.968Z","updated":"2022-01-07T07:42:22.968Z","comments":true,"path":"thinking/实践/mysql主从、分布式实践.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/mysql%E4%B8%BB%E4%BB%8E%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9E%E8%B7%B5.html","excerpt":"","text":""},{"title":"","date":"2021-11-05T17:35:19.519Z","updated":"2021-11-05T17:35:19.459Z","comments":true,"path":"thinking/springcloud/坑.html","permalink":"http://example.com/thinking/springcloud/%E5%9D%91.html","excerpt":"","text":"加上@RefreshScope后 ，@Value注解获取的值为空：原因是方法是private修饰了"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/SpringBoot基础.html","permalink":"http://example.com/thinking/java/SpringBoot%E5%9F%BA%E7%A1%80.html","excerpt":"","text":"时间 123456@Nullable@DateTimeFormat( iso = DateTimeFormat.ISO.DATE_TIME)@ApiModelProperty(&quot;结束时间&quot;)private Date endDate; 2.shi"},{"title":"","date":"2021-11-29T16:13:37.558Z","updated":"2021-11-01T05:37:06.785Z","comments":true,"path":"thinking/java/动态代理.html","permalink":"http://example.com/thinking/java/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html","excerpt":"","text":"运行期间，为interface创建实例 InvocationHandler + Proxy.newProxyInstance jdk动态代理：代理目标是接口 cGlib：代理目标是类"},{"title":"","date":"2021-11-29T16:13:34.784Z","updated":"2021-08-31T14:53:36.271Z","comments":true,"path":"thinking/java/Spring注解.html","permalink":"http://example.com/thinking/java/Spring%E6%B3%A8%E8%A7%A3.html","excerpt":"","text":""},{"title":"","date":"2021-11-29T16:13:30.510Z","updated":"2021-08-21T09:33:13.435Z","comments":true,"path":"thinking/java/工具.html","permalink":"http://example.com/thinking/java/%E5%B7%A5%E5%85%B7.html","excerpt":"","text":"1.糊涂工具 easyexcel"},{"title":"","date":"2021-11-29T16:13:22.503Z","updated":"2021-09-17T01:26:07.207Z","comments":true,"path":"thinking/java/错误原因.html","permalink":"http://example.com/thinking/java/%E9%94%99%E8%AF%AF%E5%8E%9F%E5%9B%A0.html","excerpt":"","text":"No converter found for return value of type: class com.zeesea.response.HttpResponse。（没有加Getter方法）；"},{"title":"","date":"2021-11-05T09:42:58.943Z","updated":"2021-08-31T14:55:59.172Z","comments":true,"path":"thinking/Spring boot/注解.html","permalink":"http://example.com/thinking/Spring%20boot/%E6%B3%A8%E8%A7%A3.html","excerpt":"","text":"一、注入 @Autowire bytype 注入失败之后，使用byname，根据字段名注入， @Qualifier 可以指定注入具名@Component @Lazy 延迟实例化 二、注册 @Component @Bean @Service @Primary 多个相同的bean和component时，加此注解指定优先返回 优先级"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/sql/sql常见问题.html","permalink":"http://example.com/thinking/sql/sql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html","excerpt":"","text":"```mysqlDATE_FORMAT(create_time,’%m-%d’)12345678910111213142. geometry类型的字段怎么插入 st_GeomFromText(&#x27;POINT (116.123 39.345)&#x27;)3. ```mysql //统计-日期 SELECT count(1) as `value`, DATE_FORMAT(create_time,&#x27;%m-%d&#x27;) as `date` FROM user &lt;where&gt; &lt;if test=&quot;startDateStr != null and endDateStr != null&quot;&gt; create_time between #&#123;startDateStr&#125; and #&#123;endDateStr&#125; &lt;/if&gt; &lt;/where&gt; GROUP BY DATE_FORMAT(create_time,&#x27;%m-%d&#x27;) 逗号拼接ID，select GROUP_CONCAT(id) from sys_menu mac关闭mysql: sudo /usr/local/mysql/bin/mysqladmin -u root -pzxcv1234 shutdown mac开启: sudo /usr/local/MySQL/support-files/mysql.server start 7.多种启动方式 systemctl restart mysqld"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/sql/优化mysql.html","permalink":"http://example.com/thinking/sql/%E4%BC%98%E5%8C%96mysql.html","excerpt":"","text":"准备： 一、语法顺序 与 执行顺序 1234567891011语法顺序1. SELECT 2. DISTINCT &lt;select_list&gt;3. FROM &lt;left_table&gt;4. &lt;join_type&gt; JOIN &lt;right_table&gt;5. ON &lt;join_condition&gt;6. WHERE &lt;where_condition&gt;7. GROUP BY &lt;group_by_list&gt;8. HAVING &lt;having_condition&gt;9. ORDER BY &lt;order_by_condition&gt;10.LIMIT &lt;limit_number&gt; 1234567891011执行顺序FROM &lt;表名&gt; 选取表，将多个表数据通过笛卡尔积变成一个表。ON &lt;筛选条件&gt; 对笛卡尔积的虚表进行筛选JOIN 指定join，用于添加数据到on之后的虚表中，例如left join会将左表的剩余数据添加到虚表中WHERE 对上述虚表进行筛选GROUP BY &lt;分组条件&gt; 分组 用于having子句进行判断，在书写上这类聚合函数是写在having判断里面的HAVING &lt;分组筛选&gt; 对分组后的结果进行聚合筛选SELECT &lt;返回数据列表&gt; 返回的单列必须在group by子句中，聚合函数除外DISTINCT 去重复ORDER BY &lt;排序条件&gt; 排序LIMIT &lt;行数限制&gt; 二、模糊搜索 使用MySQL内置函数INSTR(str,substr) 来匹配 使用FullText全文索引，用match against 检索(默认是2个, 可以配置最少多少长度的索引，但是需要重新建索引，) ![image-20220907211537979](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220907211537979.png) 三、导致效率低下的情况 导致全表扫描 左模糊查询 in 和not in 否定方式查询：比如 &lt;&gt;,!= (改为 &gt;+or+&lt;这种形式： WHERE col_1 &gt; 100 or col_1 &lt; 100;) 自动进行类型转换1. explain介绍![image-20220907210204806](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220907210204806.png)"},{"title":"","date":"2021-11-05T09:42:57.716Z","updated":"2021-09-02T13:58:30.296Z","comments":true,"path":"thinking/Spring boot/异常.html","permalink":"http://example.com/thinking/Spring%20boot/%E5%BC%82%E5%B8%B8.html","excerpt":"","text":"Exception RunTimeException 运行时，可以不用try catch 怎么全局接受异常(@ControllerAdvice) 国际化使用.properties文件+@ConfigurationProperties(指定前缀)+PropertySource(“指定配置文件”)"},{"title":"","date":"2021-10-27T13:10:28.719Z","updated":"2021-10-27T13:10:28.714Z","comments":true,"path":"thinking/java/多线程/threadlocal.html","permalink":"http://example.com/thinking/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/threadlocal.html","excerpt":"","text":"ThreadLocal: 不加锁，所以速度优于Synchronized 每个线程都有一个ThreadLocalMap存储ThreadLocal；每个线程互不干扰； 方法： get(); set(); initialValue(); remove(); 如果当前线程ThreadLocalMap为空时, get()会调用initialValue()，否则直接返回之前的结果； 调用remove()后，get会调用initialValue(); 注意： ThreadLocalMap的key是弱引用类型，Value是强引用类型，所以在用完ThreadLocal后 调用remove避免Value内存泄漏。 ThreadLocal不应该去存储静态变量"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/多线程/多线程.html","permalink":"http://example.com/thinking/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B.html","excerpt":"","text":"1. ReentrantLock：a. lock与unlock; b.trylock c. Condition(使用await与signal，使用前需要调用lock方法获得对象监视器)（无法像Synchronized一样在异常时自动释放锁，需要手动释放，所以需要在finally里释放锁 ） 2. Synchronized: 锁住代码块或者方法Synchronized 缺点：a .不能设置锁超时时间; b.不能通过代码释放锁; c.容易造成死锁 d.无法知道是否成功拿到锁3. Volatile: 适用于只有一个线程进行写的操作，变量被修改后，强制其它线程能够实时读取到主内存变量的最新值。（volatile 只能保证可见性，不能保证原子性）4. ThreadLocal: 每个线程都有变量的副本，互不干扰。总结： 当只有一个线程写，其它线程都是读的时候，可以用volatile修饰变量 当多个线程写，那么一般情况下并发不严重的话可以用Synchronized，Synchronized并不是一开始就是重量级锁，在并发不严重的时候，比如只有一个线程访问的时候，是偏向锁；当多个线程访问，但不是同时访问，这时候锁升级为轻量级锁；当多个线程同时访问，这时候升级为重量级锁。所以在并发不是很严重的情况下，使用Synchronized是可以的。不过Synchronized有局限性，比如不能设置锁超时，不能通过代码释放锁。 ReentranLock 可以通过代码释放锁，可以设置锁超时。 高并发下，Synchronized、ReentranLock 效率低，因为同一时刻只有一个线程能进入同步代码块，如果同时有很多线程访问，那么其它线程就都在等待锁。这个时候可以使用并发包下的数据结构，例如ConcurrentHashMap，LinkBlockingQueue，以及原子性的数据结构如：AtomicInteger。"},{"title":"","date":"2021-11-05T09:41:17.813Z","updated":"2021-10-27T16:55:00.155Z","comments":true,"path":"thinking/java/多线程/锁.html","permalink":"http://example.com/thinking/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E9%94%81.html","excerpt":"","text":"一、乐观锁与悲观锁 乐观锁： 非互斥同步锁，例如 原子类、并发容器 悲观锁：互斥同步锁，例如 sync 与 lock 数据库： 乐观： version 悲观: select for update 两种锁各自的使用场景：各有干秋悲观锁：适合并发写入多的情况，适用于临界区持锁时间比较长的情况，悲观锁可以避免大量的无用自旋等消耗，典型情况：1临界区有IO操作2临界区代码复杂或者循环量大3临界区竞争非常激烈 乐观锁：适合并发写入少，大部分是读取的场景，不加锁的能让读取性能大幅提高。"},{"title":"","date":"2021-11-26T11:59:43.415Z","updated":"2021-11-26T11:59:43.406Z","comments":true,"path":"thinking/java/设计模式/类之间的关系.html","permalink":"http://example.com/thinking/java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.html","excerpt":"","text":"类之间如何实现高内聚 低耦合？ 拆分接口，细化接口粒度。让接口分别应对不同的变化。（接口隔离） 类之间如何解耦？ 迪米特原则 防止继承泛滥 里式替换原则 装饰者模式 通过接口去规范装饰类需要实现的功能特点： 把对象传到构造器里面"},{"title":"","date":"2022-01-19T01:47:10.744Z","updated":"2022-01-19T01:47:10.729Z","comments":true,"path":"thinking/实践/io.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/io.html","excerpt":"","text":"阿里大鱼短信、极光推送"},{"title":"","date":"2022-01-22T07:23:58.831Z","updated":"2022-01-22T07:23:52.124Z","comments":true,"path":"thinking/Untitled.html","permalink":"http://example.com/thinking/Untitled.html","excerpt":"","text":""},{"title":"","date":"2022-01-25T07:53:57.365Z","updated":"2022-01-19T12:57:27.280Z","comments":true,"path":"thinking/实践/elasticsearch.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/elasticsearch.html","excerpt":"","text":""},{"title":"","date":"2022-01-19T12:58:47.619Z","updated":"2022-01-19T12:58:47.619Z","comments":true,"path":"thinking/实践/kafka.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/kafka.html","excerpt":"","text":""},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/实践/dubbo打包后部署.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/dubbo%E6%89%93%E5%8C%85%E5%90%8E%E9%83%A8%E7%BD%B2.html","excerpt":"","text":"分布式id: Uuid: 1.作为主键占用空间大，不利于二级索引 2.在InnoDB引擎下，UUID的无序性可能会引起数据位置频繁变动，严重影响插入性能 数据库自增： 1.性能受限于数据库 2. 数据量泄露 redis自增： 1.数据丢失 雪花算法： 1.时间回拨 号段模式： 第一个服务器1-100，第二个服务器101-200，依次类推 //1 cd /root/qcommerce-cms/devdocker-compose pull qcommerce-cmsdocker-compose rm -sf qcommerce-cmsdocker-compose up -ddocker image prune -f //2 sudo docker-compose rm -sf qcommerce-cms.preview sudo docker-compose pull qcommerce-cms.preview sudo docker-compose up -d qcommerce-cms.preview sudo docker image prune -f docker 配置cms前端 location / &#123; if ($request_method = &#39;OPTIONS&#39;) &#123; add_header Access-Control-Allow-Origin $http_origin; add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS; add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Token,platform&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; return 204; &#125; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://localhost:8043/; &#125;"},{"title":"","date":"2022-01-19T12:56:42.682Z","updated":"2022-01-19T12:56:42.628Z","comments":true,"path":"thinking/实践/rabbit mq.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/rabbit%20mq.html","excerpt":"","text":""},{"title":"","date":"2022-01-25T07:53:03.970Z","updated":"2022-01-24T16:39:54.820Z","comments":true,"path":"thinking/实践/限流.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/%E9%99%90%E6%B5%81.html","excerpt":"","text":"单机限流：rateLimiter(令牌桶) 分布式限流： sentinel 熔断：让发生错误的主机有恢复的时间，防止级联错误。（10秒内发生多少次错误） 触发：失败率触发 、 失败次数 恢复： 半转全，全恢复"},{"title":"","date":"2022-01-19T13:00:17.980Z","updated":"2022-01-19T13:00:17.980Z","comments":true,"path":"thinking/实践/kurbernetes.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/kurbernetes.html","excerpt":"","text":""},{"title":"","date":"2022-01-20T01:18:52.988Z","updated":"2022-01-19T12:57:02.594Z","comments":true,"path":"thinking/实践/web socket.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/web%20socket.html","excerpt":"","text":""},{"title":"","date":"2022-01-19T12:58:39.893Z","updated":"2022-01-19T12:58:39.893Z","comments":true,"path":"thinking/实践/zookeeper.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/zookeeper.html","excerpt":"","text":""},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/Untitled.html","permalink":"http://example.com/thinking/java/Untitled.html","excerpt":"","text":""},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/es 安装dock er.html","permalink":"http://example.com/newThinking/es%20%E5%AE%89%E8%A3%85dock%20er.html","excerpt":"","text":"docker run -e ES_JAVA_OPTS=”-Xms256m -Xmx256m” -e “discovery.type=single-node” -d -p 9200:9200 -p 9300:9300 –name elasticsearch e082d8ac7e5e docker run –name kibana -e ELASTICSEARCH_HOSTS=http://192.168.0.139:9200 -p 5601:5601 -d kibana:7.16.2"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/es.html","permalink":"http://example.com/newThinking/es.html","excerpt":"","text":"全文检索：match：按照空格进行分词拆分 创建索引1PUT /provmateriallibrary 类似in语句： 1234GET /provmateriallibrary/_mget&#123; &quot;ids&quot;:[&quot;TKHaa4QBpIBuIqbhyty-&quot;, &quot;TaHaa4QBpIBuIqbh-Nx_&quot;]&#125; painless日期格式：doc[‘date’].value.toString(‘yyyy-MM-dd’)"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/jvm内存结构.html","permalink":"http://example.com/newThinking/jvm%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.html","excerpt":"","text":"https://blog.51cto.com/u_15127556/4121281 线程共享：堆、方法区 线程独有：栈、本地方法栈、程序计数器 堆：存放对象； 方法区：存放类信息 栈：方法运行时，会开辟新的空间存储变量值、指向堆的地址。 堆区的结构： 年轻代、老年代。 年轻代分为：E区、S0、S1区 为什么要这样划分呢？年轻代和老年代的划分是为了更好的内存分派及回收。提高效率 jvm运行参数： -Xms 为jvm启动时分配的内存，比如-Xms200m，表示分配200M -Xmx 为jvm运行过程中分配的最大内存，比如-Xms500m，表示jvm进程最多只能够占用500M内存 -Xss 为jvm启动的每个线程分配的内存大小 -xmn：年轻代固定大小 -xx:newratio：设置年轻代和年老代的比例 -XX:MaxTenuringThreshold：设置进入老年代的年龄，默认15岁 （年轻代中存在的对象是死亡非常快的。存在朝生夕死的情况。所以为了提高年轻代的垃圾回收效率，又将年轻代划分为三个区域，一个eden和两个sunrvivor from。在年轻代执行gc的时候，如果老年代的连续空间小于新生代对象的总大小，就会触发一次full gc。是为了给新生代做担保，保证新生代的老年对象可以顺利的进入到老年代的内存区。） 年龄1+年龄2+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会把年龄n以上的对象都放入老年代 如果你要创建一个大于这个大小的对象，比如一个超大的数组，或者是别的啥东西，此时就直接把这个大对象放到老年代里去。压根儿不会经过新生代。 之所以这么做，就是要避免新生代里出现那种大对象，然后屡次躲过GC，还得把他在两个Survivor区域里来回复制多次之后才能进入老年代，那么大的一个对象在内存里来回复制，不是很耗费时间吗？ 所以说，这也是一个对象进入老年代的规则。 关于gc:年轻代： 老年代老年代中存放的对象是存活了很久的，年龄大于15的对象。在老年代触发的gc叫major gc也叫full gc。full gc会包含年轻代的gc。但老年代只要执行gc就一定是full gc。full gc采用的是标记-清除算法。会产生内存碎片。在执行full gc的情况下，会阻塞程序的正常运行。老年代的gc比年轻代的gc效率上慢10倍以上。对效率有很大的影响。 当新对象大于survivor区的50%，可以直接进入老年代 永久代(1.8移除)永久代是hotspot虚拟机，也就是我们使用的java虚拟机的特有的概念，他不属于堆内存，是方法区的一种实现，各大厂商对方法区有各自的实现。永久代存放jvm运行时，需要的类，包含java库的类和方法，在触发full gc的情况下，永久代也会被进行垃圾回收。永久代的内存溢出也就是 pergen space。 回收算法： 标记算法：标记垃圾对象，然后回收。缺点是会造成很多内存碎片。 复制算法：将内存一分为二，标记存活对象，复制到另外一半内存中，将之前的内存清空。缺点是：1G内存只有512M可以使用，内存使用率低。 复制算法优化版：将内存分为E、两个Survivor区，其中Eden区占80%内存空间，每一块Survivor区各占10%内存空间。内存使用率最高能达到90%。"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/mysql.html","permalink":"http://example.com/newThinking/mysql.html","excerpt":"","text":"mysql锁： 通过索引进行delete、update的，都会给索引和主键加锁。通过非索引进行delete、update的，会给所有行记录加锁。 例子： 唯一索引uq_key的delete操作：根据唯一索引找到记录，给唯一索引加X锁，为了防止并发的sql通过主键修改uq_key的值，还需要同时给主键加X锁. RR模式下非唯一索引需要加间隙锁 删除缓存有两种方式： 先删除缓存，再更新数据库。解决方案是使用延迟双删。 先更新数据库，再删除缓存。解决方案是消息队列或者其他binlog同步，引入消息队列会带来更多的问题，并不推荐直接使用。"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/redis.html","permalink":"http://example.com/newThinking/redis.html","excerpt":"","text":"String结构：底层是字节数组 ![image-20220915230335763](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220915230335763.png) Hash字典：(购物车) ![image-20220915230633335](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220915230633335.png) List: ![image-20220915231429416](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220915231429416.png) Set: ![image-20220915232539089](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220915232539089.png) Sorted set: ![image-20220915232524942](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220915232524942.png) 分布式锁：（加锁保证原子性，解锁也需要保证原子性（lua脚本 ）） 加锁：set nx ex（过期时间一起设置） 解锁：lua脚本 问题1: 业务超时 问题2: 删锁怎么保证删除的不是别的线程的锁（setnx时，不要使用固定的值，然后解锁的时候要使用lua保证原子性） Redission: 优点：不指定过期时间时，会开个线程进行锁续期（看门狗）、可重入锁。 实现了juc的Lock接口：tryLock可以指定最长等待时间、还有自动解锁时间。 Semaphore: 用于限流（） 数据一致性： 双写模式：更新数据库，更新缓存 失效模式： 更新数据库，删除缓存 ![image-20221016222703272](/Users/iamfenges/Library/Application Support/typora-user-images/image-20221016222703272.png)"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/下单方案.html","permalink":"http://example.com/newThinking/%E4%B8%8B%E5%8D%95%E6%96%B9%E6%A1%88.html","excerpt":"","text":"下单扣库存方案： 下单立即扣库存：虽然链路短、性能，但是容易被恶意下单。 支付扣库存：可以防止恶意下单，但是只有在支付的时候才能确定库存。不适用于秒杀。 下单预扣库存，支付超时自动取消：对于恶意下单的，超时会自动取消。又能把大流量拦截在下单之前。 订单号：第一位：以2021年为偏移量，2022年则为1； 2-4位：一年当中的第多少天；5-9位：一天当中的第几秒（一天有86400秒）；10-13位：通过redis递增（每秒能生成9999个订单号）"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/关于hashcode与equals.html","permalink":"http://example.com/newThinking/%E5%85%B3%E4%BA%8Ehashcode%E4%B8%8Eequals.html","excerpt":"","text":"contains方法: List使用的是equals对比; HashSet使用的是hashCode对比; add方法: HashSet使用hashCode去重复 两者关系：equals相等则hashCode必定相等; hashCode相等equals不一定相等；"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/取余.html","permalink":"http://example.com/newThinking/%E5%8F%96%E4%BD%99.html","excerpt":"","text":"假设被除数是x，对于除数是2n的取余操作x%2n，都可以写成x&amp;(2^n-1)，位运算效率高！ (2^n -1) * i = (i &lt;&lt; n) - i; 比如 31 * i = (i &lt;&lt; 5) - i"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/常用的mysql函数.html","permalink":"http://example.com/newThinking/%E5%B8%B8%E7%94%A8%E7%9A%84mysql%E5%87%BD%E6%95%B0.html","excerpt":"","text":"UNIX_TIMESTAMP(‘2022-10-25’) ;"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/支付流程.html","permalink":"http://example.com/newThinking/%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B.html","excerpt":"","text":"用户-&gt;商户系统（校验订单合法、生成订单号）-&gt;小程序支付系统（创建支付订单）-&gt;商户系统（订单表填充支付订单号）-&gt; 小程序（拿着支付单号）-&gt;支付系统验证通过后跳到支付页面-&gt;支付成功后会通知小程序和商户系统 微信支付通知：需要查询订单是否存在、订单与支付金额是否相等；（return 字符串告诉微信不用通知了）"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/枚举单例.html","permalink":"http://example.com/newThinking/%E6%9E%9A%E4%B8%BE%E5%8D%95%E4%BE%8B.html","excerpt":"","text":"因为Java虚拟机会保证枚举对象的唯一性，因此每一个枚举类型和定义的枚举变量在JVM中都是唯一的。 既可以避免多线程同步问题；还可以防止通过反射和反序列化来重新创建新的对象"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/线程.html","permalink":"http://example.com/newThinking/%E7%BA%BF%E7%A8%8B.html","excerpt":"","text":""},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/限流.html","permalink":"http://example.com/newThinking/%E9%99%90%E6%B5%81.html","excerpt":"","text":"概念： 关于缓存： 1.缓存击穿：热点缓存同时过期，直接访问db层. (db层被打垮) 2.缓存穿透：访问数据库不存在的数据，所以不会缓存。 解决：使用布隆过滤器 降级主要是对系统有限资源的合理协调，而熔断则是微服务架构在发生危险时自我保护的一种机制。 把限流、降级和熔断三个概念放在一起时，会发现它们彼此并不是孤立的存在，而是相辅相成。通过限流，我们可以降低系统的负载，从而可以减少不必要的降级，而熔断则又可以看作是特殊的降级。它们三个都是为了保障服务的稳定性"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/面试题.html","permalink":"http://example.com/newThinking/%E9%9D%A2%E8%AF%95%E9%A2%98.html","excerpt":"","text":"项目问题： 1.实现幂等性常见的方式有：悲观锁（ for update ）、乐观锁、唯一约束2.几种方式，按照最优排序：乐观锁 &gt; 唯一约束 &gt; 悲观锁摘抄自网络，我面试时候也是这么回答的 1.重复支付问题产生原因：一个支付请求未处理完成之前，又发起了支付请求，发生了两次支付。 解决：1.前端防重 2.后端做幂等性处理。 下面的伪代码会有问题，比如两个请求同时到达第2步，就会发生两次重复支付： ![image-20220914231155193](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220914231155193.png) 加锁优化： ![image-20220914231530435](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220914231530435.png) ![image-20220914231815093](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220914231815093.png) 2.超时退库存、优惠券问题：1.回滚失败如何解决 2. 重复回滚如何预防 理论问题： 关于一致性： ACID中的一致性 一致性哈希 CAP定理的一致性 分布式多副本一致性 CAP的一致性是指线性一致性，主要描述了在故障和延时下的副本之前的协同问题 一致性哈希是为了解决分布式缓存问题 分布式多副本一致性则是保持分布式系统中各个节点之间的数据一致 强一致性： 顺序一致性： 最终一致性： 12306"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"newThinking/题.html","permalink":"http://example.com/newThinking/%E9%A2%98.html","excerpt":"","text":"1.类变量的初始化时机？ 类变量有两次赋初始值的过程，一次在准备阶段，赋予初始值（也可以是指定值）；另外一次在初始化阶段，赋予程序员定义的值。 局部变量不像类变量那样存在准备阶段。 static 语句块，只能访问到定义在 static 语句块之前的变量 12345678910111213141516171819202122public class A &#123; static int a = 0 ; static &#123; a = 1; b = 1; &#125; static int b = 0; public static void main(String[] args) &#123; System.out.println(a); System.out.println(b); &#125; &#125; 结果是 1 0"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/jdbcTemplate.html","permalink":"http://example.com/thinking/jdbcTemplate.html","excerpt":"","text":"1234NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();params.put(&quot;imeis&quot;, imeis);return namedParameterJdbcTemplate.query(&quot;select `IMEI`, `STORE_NO`, `PERM_ID` from tfm.shop_devices where `IMEI` not in (:imeis)&quot;, params, new BeanPropertyRowMapper&lt;&gt;(TfmShopDevices.class));"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/分库分表.html","permalink":"http://example.com/thinking/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8.html","excerpt":"","text":"存在的问题: 一、分表 范围分片：（比如根据1-99、100-199、200-299），尾部热点（最后的分片查询压力比较大）、数据偏斜（数据分配不平均）、资源浪费（）。 hash分表: 查询范围跨库（比如：id &gt; 8）。 范围分片适合日志，因为查询日志一般都只根据最近时间范围查最新日志。 hash分表适合档案这种根据编号查询的例子。 二、跨库join查询 ![image-20220829211500211](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220829211500211.png) 三、跨节点分页查询（使用es） ![image-20220829212032420](/Users/iamfenges/Library/Application Support/typora-user-images/image-20220829212032420.png)"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/格式.html","permalink":"http://example.com/thinking/%E6%A0%BC%E5%BC%8F.html","excerpt":"","text":"时间格式： 2021-07-10T07:52:43.283Z"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/Spring boot/shiro.html","permalink":"http://example.com/thinking/Spring%20boot/shiro.html","excerpt":"","text":"登录 12345Subject subject = SecurityUtils.getSubject();if (subject.isAuthenticated()) &#123; subject.logout(); sessionHelper.logout();&#125;"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/Spring boot/拦截器和过滤器时机.html","permalink":"http://example.com/thinking/Spring%20boot/%E6%8B%A6%E6%88%AA%E5%99%A8%E5%92%8C%E8%BF%87%E6%BB%A4%E5%99%A8%E6%97%B6%E6%9C%BA.html","excerpt":"","text":""},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/encrypt/加密解密.html","permalink":"http://example.com/thinking/encrypt/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html","excerpt":"","text":"糊涂工具 12345&lt;dependency&gt; &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt; &lt;artifactId&gt;bcprov-jdk15to18&lt;/artifactId&gt; &lt;version&gt;1.68&lt;/version&gt;&lt;/dependency&gt; 123456private String encrypt(String sourceKey, String iv, String content) &#123; AES aes = new AES(&quot;CBC&quot;, &quot;PKCS7Padding&quot;, sourceKey.getBytes(), iv.getBytes()); return aes.encryptBase64(content);&#125;"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/java基础.html","permalink":"http://example.com/thinking/java/java%E5%9F%BA%E7%A1%80.html","excerpt":"","text":"String是不可变类型（Immutable） ArrayList 与 LinkList 1.存储方式不同 2.一个插入快、一个查询快 HashMap与TreeMap 1.红黑树 2.hash冲突 HashSet内部放着 HashMap 线程池 1.核心线程数 2.最大线程数 3.队列 4. keepAliveTime 5.handler（拒绝策略） 超出核心线程数之后、放到队列。如果队列满了就开启新的线程数来处理。 Sync 与 ReentryLock 关键字、设置公平、可否中断、更细粒度 锁 偏向锁、轻量锁、重量锁 Volatile 多线程可见、防止指令重排 copyOnWrite容器 写操作会复制一份副本、成功后替换原来的。 BIO、NIO、AIO 阻塞、同步非阻塞（用的比较广）、异步（编程人员要求比较高） mysql读写方式 当前读、快照读 快照读：select查询 当前读：select+for update 、 update、delete; mysql锁： 行锁、表锁、间隙锁 当前读+查询索引+索引值不存在 间隙锁只对insert操作有影响、仍然可以当前读 优化：索引加上唯一索引，防止行锁升级为间隙锁 事务隔离级别： 可重复读：无法避免幻读（mysql解决：mvcc+当前读锁的机制） Redis: 数据结构： hash、zset（跳表+压缩表（双向链表）） redis持久化： 为了防止重启后，数据丢失 两种策略： rdb（全量）、aof(日志)。两种合作：设置900秒后去做全量备份、期间使用日志备份 redis淘汰策略： lru: 最近使用次数最少的（有allkeys: 所有、volatile: 过期时间） 电商： 减库存：（不应该每次减库存都进行db操作） 微信支付： 异步通知： 微信向我们发送Post请求 支付成功回调处理：1.做签名校验、金额校验 2.修改支付状态 3.告诉微信不要异步通知了（按照微信给的格式返回） 支付宝支付： RSA签名 != 加密 自己用RSA非对称签名生成商户私钥和公钥，公钥填写到填到支付宝 支付：发起（带上商户私钥） =&gt; 支付宝使用（商户公钥） 异步通知： 支付宝发起（带上支付宝私钥） =&gt; 商户系统（使用支付宝公钥验签）"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/jvm运行原理.html","permalink":"http://example.com/thinking/java/jvm%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86.html","excerpt":"","text":"方法区（method area): 1.7jdk之前叫永久代，1.8之后叫元空间（meta pace) 3种gc算法：1.mark sweep(标记清除) 2.copy 3.mark compact 定位oom错误： 开启dump输出文件，使用dump工具查看分析错误原因。 定位死锁： 使用jstack"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/shiro.html","permalink":"http://example.com/thinking/java/shiro.html","excerpt":"","text":"12345678910111213登录this.logout();String token = this.createToken((String)null, String.valueOf(sessionUser.getId()));Claims claims = this.parseToken(token);String sessionKey = this.getSessionKey(claims.getSubject());Date expireAt = DateUtils.addSeconds(new Date(), (int)this.jbSessionProperties.getExpire().get(ChronoUnit.SECONDS));this.redisTemplate.opsForHash().put(sessionKey, &quot;subject&quot;, sessionUser);this.redisTemplate.opsForHash().put(sessionKey, &quot;source&quot;, source);this.redisTemplate.expireAt(sessionKey, expireAt);SecurityUtils.getSubject().login(new SessionToken(token));RequestThreadLocal.setLoginToken(token);this.response.setHeader(this.jbSessionProperties.getHeader(), token);this.response.addHeader(&quot;Access-Control-Expose-Headers&quot;, this.jbSessionProperties.getHeader()); 12345678910111213public Claims parseToken(String token) &#123; if (StringUtils.isEmpty(token)) &#123; throw new UnLoginException(); &#125; else if (this.jbSessionProperties.isJwtEnable()) &#123; try &#123; return (Claims)Jwts.parser().setSigningKey(this.jbSessionProperties.getJwtSecret()).parseClaimsJws(token).getBody(); &#125; catch (ExpiredJwtException var3) &#123; throw new ServiceException(ApiCode.login_expired); &#125; &#125; else &#123; return Jwts.claims().setSubject(token); &#125;&#125;"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/面试问答.html","permalink":"http://example.com/thinking/java/%E9%9D%A2%E8%AF%95%E9%97%AE%E7%AD%94.html","excerpt":"","text":"协变 即指窄类型替换宽类型，逆变 即宽类型覆盖窄类型 什么情况下需要用到redis? io 操作频繁、访问频繁、实时性要求不高 一些需要超时失效的数据，比如验证码、Token、Session 等 购物车操作 ThreadLocal 用过么，用途是什么，原理是什么，用的时候要注意什么Threadlocal底层是通过threadlocalMap进行存储键值 每个ThreadLocal类创建一个Map，然后用线程的ID作为Map的key，实例对象作为Map的value，这样就能达到各个线程的值隔离的效果。 ThreadLocal的作用是提供线程内的局部变量，这种变量在线程的生命周期内起作用，减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。 java中class.forName()和classLoader都可用来对类进行加载。class.forName()前者除了将类的.class文件加载到jvm中之外，还会对类进行解释，执行类中的static块。而classLoader只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。Class.forName(name, initialize, loader)带参函数也可控制是否加载static块。并且只有调用了newInstance()方法采用调用构造函数，创建类的对象 如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer 父类静态成员和静态代码块-&gt;子类静态成员和静态代码块-&gt;父类非静态成员和非静态代码块-&gt;父类构造方法-&gt;子类非静态成员和非静态代码块-&gt;子类构造方法"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/mybatis/语法.html","permalink":"http://example.com/thinking/mybatis/%E8%AF%AD%E6%B3%95.html","excerpt":"","text":"设置为空 12345678910update( Wrappers.&lt;UserInfo&gt;lambdaUpdate() .set(UserInfo::getCreditCard, null) .set(UserInfo::getExtDay, null) .set(UserInfo::getOrderNo, null) .set(UserInfo::getPeriodNo, null) .set(UserInfo::getPeriodAmt, null) .set(UserInfo::getPeroidDateArray, null) .eq(UserInfo::getUserId, userId)); 通过entity更新 1update(userOrder, updateWrapper.eq(UserOrder::getOrderNo, orderNo));"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/springcloud/nacos配置文件.html","permalink":"http://example.com/thinking/springcloud/nacos%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236## Copyright 1999-2021 Alibaba Group Holding Ltd.## Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);# you may not use this file except in compliance with the License.# You may obtain a copy of the License at## http://www.apache.org/licenses/LICENSE-2.0## Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.##*************** Spring Boot Related Configurations ***************#### Default web context path:server.servlet.contextPath=/nacos### Default web server port:server.port=8848#*************** Network Related Configurations ***************#### If prefer hostname over ip for Nacos server addresses in cluster.conf:# nacos.inetutils.prefer-hostname-over-ip=false### Specify local server&#x27;s IP:# nacos.inetutils.ip-address=#*************** Config Module Related Configurations ***************#### If use MySQL as datasource: spring.datasource.platform=mysql### Count of DB:db.num=1### Connect URL of DB:db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTCdb.user=rootdb.password=zxcv1234### Connection pool configuration: hikariCPdb.pool.config.connectionTimeout=30000db.pool.config.validationTimeout=10000db.pool.config.maximumPoolSize=20db.pool.config.minimumIdle=2#*************** Naming Module Related Configurations ***************#### Data dispatch task execution period in milliseconds: Will removed on v2.1.X, replace with nacos.core.protocol.distro.data.sync.delayMs# nacos.naming.distro.taskDispatchPeriod=200### Data count of batch sync task: Will removed on v2.1.X. Deprecated# nacos.naming.distro.batchSyncKeyCount=1000### Retry delay in milliseconds if sync task failed: Will removed on v2.1.X, replace with nacos.core.protocol.distro.data.sync.retryDelayMs# nacos.naming.distro.syncRetryDelay=5000### If enable data warmup. If set to false, the server would accept request without local data preparation:# nacos.naming.data.warmup=true### If enable the instance auto expiration, kind like of health check of instance:# nacos.naming.expireInstance=true### will be removed and replaced by `nacos.naming.clean` propertiesnacos.naming.empty-service.auto-clean=truenacos.naming.empty-service.clean.initial-delay-ms=50000nacos.naming.empty-service.clean.period-time-ms=30000### Add in 2.0.0### The interval to clean empty service, unit: milliseconds.# nacos.naming.clean.empty-service.interval=60000### The expired time to clean empty service, unit: milliseconds.# nacos.naming.clean.empty-service.expired-time=60000### The interval to clean expired metadata, unit: milliseconds.# nacos.naming.clean.expired-metadata.interval=5000### The expired time to clean metadata, unit: milliseconds.# nacos.naming.clean.expired-metadata.expired-time=60000### The delay time before push task to execute from service changed, unit: milliseconds.# nacos.naming.push.pushTaskDelay=500### The timeout for push task execute, unit: milliseconds.# nacos.naming.push.pushTaskTimeout=5000### The delay time for retrying failed push task, unit: milliseconds.# nacos.naming.push.pushTaskRetryDelay=1000### Since 2.0.3### The expired time for inactive client, unit: milliseconds.# nacos.naming.client.expired.time=180000#*************** CMDB Module Related Configurations ***************#### The interval to dump external CMDB in seconds:# nacos.cmdb.dumpTaskInterval=3600### The interval of polling data change event in seconds:# nacos.cmdb.eventTaskInterval=10### The interval of loading labels in seconds:# nacos.cmdb.labelTaskInterval=300### If turn on data loading task:# nacos.cmdb.loadDataAtStart=false#*************** Metrics Related Configurations ***************#### Metrics for prometheus#management.endpoints.web.exposure.include=*### Metrics for elastic searchmanagement.metrics.export.elastic.enabled=false#management.metrics.export.elastic.host=http://localhost:9200### Metrics for influxmanagement.metrics.export.influx.enabled=false#management.metrics.export.influx.db=springboot#management.metrics.export.influx.uri=http://localhost:8086#management.metrics.export.influx.auto-create-db=true#management.metrics.export.influx.consistency=one#management.metrics.export.influx.compressed=true#*************** Access Log Related Configurations ***************#### If turn on the access log:server.tomcat.accesslog.enabled=true### The access log pattern:server.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i### The directory of access log:server.tomcat.basedir=#*************** Access Control Related Configurations ***************#### If enable spring security, this option is deprecated in 1.2.0:#spring.security.enabled=false### The ignore urls of auth, is deprecated in 1.2.0:nacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**### The auth system to use, currently only &#x27;nacos&#x27; and &#x27;ldap&#x27; is supported:nacos.core.auth.system.type=nacos### If turn on auth system:nacos.core.auth.enabled=false### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.nacos.core.auth.caching.enabled=true### Since 1.4.1, Turn on/off white auth for user-agent: nacos-server, only for upgrade from old version.nacos.core.auth.enable.userAgentAuthWhite=false### Since 1.4.1, worked when nacos.core.auth.enabled=true and nacos.core.auth.enable.userAgentAuthWhite=false.### The two properties is the white list for auth and used by identity the request from other server.nacos.core.auth.server.identity.key=serverIdentitynacos.core.auth.server.identity.value=security### worked when nacos.core.auth.system.type=nacos### The token expiration in seconds:nacos.core.auth.plugin.nacos.token.expire.seconds=18000### The default token:nacos.core.auth.plugin.nacos.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789### worked when nacos.core.auth.system.type=ldap，&#123;0&#125; is Placeholder,replace login username#nacos.core.auth.ldap.url=ldap://localhost:389#nacos.core.auth.ldap.basedc=dc=example,dc=org#nacos.core.auth.ldap.userDn=cn=admin,$&#123;nacos.core.auth.ldap.basedc&#125;#nacos.core.auth.ldap.password=admin#nacos.core.auth.ldap.userdn=cn=&#123;0&#125;,dc=example,dc=org#*************** Istio Related Configurations ***************#### If turn on the MCP server:nacos.istio.mcp.server.enabled=false#*************** Core Related Configurations ***************#### set the WorkerID manually# nacos.core.snowflake.worker-id=### Member-MetaData# nacos.core.member.meta.site=# nacos.core.member.meta.adweight=# nacos.core.member.meta.weight=### MemberLookup### Addressing pattern category, If set, the priority is highest# nacos.core.member.lookup.type=[file,address-server]## Set the cluster list with a configuration file or command-line argument# nacos.member.list=192.168.16.101:8847?raft_port=8807,192.168.16.101?raft_port=8808,192.168.16.101:8849?raft_port=8809## for AddressServerMemberLookup# Maximum number of retries to query the address server upon initialization# nacos.core.address-server.retry=5## Server domain name address of [address-server] mode# address.server.domain=jmenv.tbsite.net## Server port of [address-server] mode# address.server.port=8080## Request address of [address-server] mode# address.server.url=/nacos/serverlist#*************** JRaft Related Configurations ***************#### Sets the Raft cluster election timeout, default value is 5 second# nacos.core.protocol.raft.data.election_timeout_ms=5000### Sets the amount of time the Raft snapshot will execute periodically, default is 30 minute# nacos.core.protocol.raft.data.snapshot_interval_secs=30### raft internal worker threads# nacos.core.protocol.raft.data.core_thread_num=8### Number of threads required for raft business request processing# nacos.core.protocol.raft.data.cli_service_thread_num=4### raft linear read strategy. Safe linear reads are used by default, that is, the Leader tenure is confirmed by heartbeat# nacos.core.protocol.raft.data.read_index_type=ReadOnlySafe### rpc request timeout, default 5 seconds# nacos.core.protocol.raft.data.rpc_request_timeout_ms=5000#*************** Distro Related Configurations ***************#### Distro data sync delay time, when sync task delayed, task will be merged for same data key. Default 1 second.# nacos.core.protocol.distro.data.sync.delayMs=1000### Distro data sync timeout for one sync data, default 3 seconds.# nacos.core.protocol.distro.data.sync.timeoutMs=3000### Distro data sync retry delay time when sync data failed or timeout, same behavior with delayMs, default 3 seconds.# nacos.core.protocol.distro.data.sync.retryDelayMs=3000### Distro data verify interval time, verify synced data whether expired for a interval. Default 5 seconds.# nacos.core.protocol.distro.data.verify.intervalMs=5000### Distro data verify timeout for one verify, default 3 seconds.# nacos.core.protocol.distro.data.verify.timeoutMs=3000### Distro data load retry delay when load snapshot data failed, default 30 seconds.# nacos.core.protocol.distro.data.load.retryDelayMs=30000"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/sql/查看日志.html","permalink":"http://example.com/thinking/sql/%E6%9F%A5%E7%9C%8B%E6%97%A5%E5%BF%97.html","excerpt":"","text":"– 查看当前日志输出类型：table / file ，可根据需要具体设置show variables like ‘log_output’; – 设置日志输出至tableset global log_output=’table’; – 设置日志输出至fileset global log_output=’file’; – 查看日志输出文件的保存路径show variables like ‘general_log_file’; – 修改日志输出文件的保存路径set global general_log_file=’tmp/general.log’; – 完成日志模式设置后，开启日志功能– 查看日志功能设置状态show variables like ‘general_log’; – 打开日志记录功能set global general_log=on; – 关闭日志记录功能set global general_log=off; – 日志输出至table模式，查看日志记录SELECT * from mysql.general_log ORDER BY event_time DESC; – 日志输出至table模式，清空日志记录truncate table mysql.general_log; – 日志输出至file模式，查看日志记录cat /tmp/general.log 慢日志show VARIABLES like “%slow_query_log%”;set GLOBAL slow_query_log=on; show variables like ‘long_query_time’;"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/实践/aes加密案例.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/aes%E5%8A%A0%E5%AF%86%E6%A1%88%E4%BE%8B.html","excerpt":"","text":"—送出電文必須進行加密處理：AES256 演算法加密，採 base64 編碼並加密後字串執行 URLEncode 處理;接收端需進行 URLDecode。(1) 採用 AES 256Bit 加密 (2) 加密模式使用 CBC（Cipher-block chaining） (3) 加密 Key 32Bit (4) 初始向量 IV 為加密 key 取 MD5 之後的值，16Bit 123456789101112131415161718private static String push2(String sourceKey, String memberId, String pushMsg, String targetPath)&#123; FamiPortPushForm pushForm = new FamiPortPushForm(); pushForm.setAppId(&quot;P0088&quot;); pushForm.setMemberId(memberId); pushForm.setPushMsg(pushMsg); pushForm.setActionId(targetPath); pushForm.setActionParam(&quot;&quot;); pushForm.setPushUrl(&quot;&quot;); pushForm.setStatus(&quot;0&quot;); byte[] sourceKeyBytes = sourceKey.getBytes(StandardCharsets.UTF_8); byte[] aesKeyBytes = SecureUtil.sha256().digest(sourceKeyBytes); // 32位 byte[] aesIvBytes = SecureUtil.md5().digest(sourceKeyBytes); AES aes = new AES(Mode.CBC, Padding.PKCS5Padding, aesKeyBytes); byte[] encryptData = aes.setIv(aesIvBytes).encrypt(JBsonUtils.toJson(pushForm)); return URLEncodeUtil.encode(Base64.getEncoder().encodeToString(encryptData));&#125;"},{"title":"","date":"2022-12-03T14:21:37.369Z","updated":"2022-12-03T14:21:37.369Z","comments":true,"path":"thinking/实践/一次5.5=>8.0的数据库同步.html","permalink":"http://example.com/thinking/%E5%AE%9E%E8%B7%B5/%E4%B8%80%E6%AC%A15.5=%3E8.0%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5.html","excerpt":"","text":"Navicat 导入数据时报Incorrect datetime value: ‘0000-00-00 00:00:00.000000’ 错误此错误是因为Mysql5.7版本及以上版本的datetime值不能为’0000-00-00 00:00:00’, 处理方法： 1.单独导出使用了datetime字段类型，并且值有0000-00-00 00:00:00’的表，批量修改掉值在导入，此方法工作量大。 2.配置sql_mode; Select @@sql_mode; #把结果保存起来 set global sql_mode = ‘’;"},{"title":"","date":"2022-12-03T14:21:37.365Z","updated":"2022-12-03T14:21:37.365Z","comments":true,"path":"thinking/java/多线程/Java内存模型（JMM）.html","permalink":"http://example.com/thinking/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89.html","excerpt":"","text":"java内存模型是规范：规范、可见性、重排序、原子性 可见性、重排序 为什么会有可见性问题？ 因为cpu的多级缓存，导致读的数据过期。 如果公用一个缓存就不会有可见性问题。 为什么要有缓存？ 缓存的容量虽小，但速度仅次于cpu JMM 主内存与本地内存的关系 1.所有变量都存储在主内存中，同时线程也有自己的独立工作内存（主内存变量的拷贝） 2.线程不能直接读写主内存的变量，只能操作自己工作内存的变量，再同步到主内存中 3.主内存线程间共享；工作内存线程独有。线程间通信通过主内存。 Happens-before规则：解决可见性 Volatile: 不适用于a++这种情况，只适合赋值（因为读后再写不是原子操作） 创建对象过程： 1.创建控对象 2.调用构造方法 3.分配给变量"}],"posts":[{"title":"","slug":"分布式-分布式组件","date":"2022-12-03T14:21:37.361Z","updated":"2022-12-03T14:21:37.361Z","comments":true,"path":"2022/12/03/分布式-分布式组件/","link":"","permalink":"http://example.com/2022/12/03/%E5%88%86%E5%B8%83%E5%BC%8F-%E5%88%86%E5%B8%83%E5%BC%8F%E7%BB%84%E4%BB%B6/","excerpt":"","text":"分布式事务： seata+feign 分布式锁 redission 分布式限流 Sentinel 注册中心 Zookeeper 分布式session JWT 分布式调度 Xxl-job 分库分表 Shardingsphere(分库分表、读写分离)","categories":[],"tags":[]},{"title":"消息队列","slug":"消息队列-rabbit-mq","date":"2021-11-21T16:00:00.000Z","updated":"2022-01-28T08:46:28.488Z","comments":true,"path":"2021/11/22/消息队列-rabbit-mq/","link":"","permalink":"http://example.com/2021/11/22/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-rabbit-mq/","excerpt":"消息队列","text":"什么是消息队列?通俗理解就是生产者用队列的方式发送消息，把要传输的数据放在队列中，消费者从队列中取出消息。 为什么要引入消息队列?能解决什么问题?消息队列是很重要的分布式中间件，能够应用于流量削峰填谷、应用间解耦、异步处理、消息通讯场景. 流量削峰很多电商网站都会搞整点秒杀的优惠活动，如果按照传统实现方案，通过传统方式进行秒杀下单，所有的查询创建在秒杀活动开始的时候一瞬间全都打到db server上面去，流量暴增,数据库立马就跪了,服务全跪。显然传统方式是无法应对这种瞬时激增的流量的，那么这时候就要引入流量削峰的方案了，引入消息队列,所有的下单信息发送到消息队列中,并给定一个当前系统能承受的最大请求数量，当超过这个最大数量，多余的流量被丢弃,将被削掉流量的用户引导至错误页面,削峰完成,虽然丢失了一部分流量,但是保证了流量超出系统承受能力的时候，系统不至于崩溃. 应用间解耦案例:系统A提供了一些数据，此时系统B对这些数据比较关注，此时的技术方案是A系统直接将数据通过接口调用发送给系统B,这时问题解决了,A系统成功为B系统提供了数据。 存在的问题: 系统A和系统B都存在宕机的可能性，服务的高可用性没有办法保证,通过接口调用的方式存在失败的可能性.如果这时又来了系统C,D,E,这时按照刚才的方案，系统A又需要调用系统C，D，E，这时候系统A的开发人员肯定要疯了,同样的逻辑要写3,4次.解决方案:这时候如果使用消息队列,系统A的开发人员就解脱了，系统A只需要应用消息队列中的发布订阅模式,将数据简单地丢到消息队列中，对此数据关心的系统直接从消息队列中取出这份数据即可. 异步处理案例:假设现在有一个简单的登录场景,假设进行登录的时候需要执行3个操作,调用user服务的查询用户接口A,记录访问日志存库操作B,发送推送消息操作C,这三个操作依次耗时20ms,30ms,50ms如果同步处理的话那么在后端服务内的耗时至少是三个操作的总和,返给前端的时候还要计算上TCP连接建立的时间，实际上这个操作中，有一些操作是对于前端交互是毫无关系的,比如操作B和操作C，用户点击登录时用户所关心的是立即登录，并不关心记录日志,发送推送消息这些操作,这些操作完全可以异步处理，非核心的业务逻辑或不要求立刻返回结果的任务完全可以异步执行，而这时就可以使用消息队列来完成这个操作。 消息通讯消息队列还可以应用于线程间通信或者进程间通信,或者应用于纯消息通讯,比如点对点的聊天，或者聊天室这种发布订阅模式。","categories":[{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}],"tags":[{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"java中的锁","slug":"Java-锁","date":"2021-07-12T16:00:00.000Z","updated":"2022-01-28T08:46:19.497Z","comments":true,"path":"2021/07/13/Java-锁/","link":"","permalink":"http://example.com/2021/07/13/Java-%E9%94%81/","excerpt":"关于java中的锁","text":"锁的分类共享锁 VS 排他锁共享锁和排它锁是针对锁的共享这方面来说的，即共享锁是可以被多个线程共享的，而排它锁不是 共享锁共享锁又被称为读锁，可以被多个线程所持有，如果线程A对共享资源T加了共享锁，则线程A只能读取共享资源T，并不能对其进行修改，其他线程只能对共享资源T加共享锁，不能加排它锁 排它锁排它锁又被称为写锁，如果线程A对共享资源T加了排它锁，则线程A既能对共享资源T读又能进行写操作，其他线程不能对共享资源T加任何类型的锁，其中JDK中的synchronized和Lock中写锁的实现类都是排它锁 自旋锁 VS 自适应自旋锁自旋锁自旋锁实际上是按照在线程获取锁失败的时候是否会是否挂起该线程来划分的，自旋锁是指在线程获取共享资源的时候获取锁失败了，认为等一小会儿(进行固定次数的自旋)，就可以获得该资源的锁，而不是通过CPU阻塞线程，切换线程的时间片这种方式，通常情况下这比CPU进行线程切换(涉及到用户态和内核态的转换)的开销要小得多，如果自旋完成后，前面锁定资源的线程已经释放了锁，那么当前线程可以拿到锁，不过这是一个不太确定的情况，有可能自旋完成后，前面的线程还没有释放该资源锁。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程可能只是浪费CPU的时间片，所以自旋的等待时间需要有一定的限度，如果自旋超过了限定次数，没有获得资源锁，就应该挂起线程。 自旋是通过CAS实现的，类似AtomicInteger中调用unsafe进行自增(do-while循环)就是一个自旋操作，如果修改失败就通过循环修改值，直至修改成功 自适应自旋锁自适应自旋锁是在自旋锁上面进行的改进，它的自旋时间不再是固定值，而是由在同一个自旋锁上一次的自选时间和拥有者的状态来决定的，如果同一个锁对象上，刚刚成功获取过锁，则虚拟机认定它很有可能再次成功，那么它的自旋时间可以允许变得更长，反之则更短 可重入锁可重入锁又被称为是递归锁，是指同一个线程在外层方法已经拿到锁的情况下，在进入内层方法的时候就会自动拿到锁，java中的Synchronized和ReentrantLock都是可重入锁，可重入锁在一定程度上可以避免死锁的发生。 比如类A有两个实例方法C,D，这两个方法都被sychronized修饰，在C方法内部调用了D，那么某一个线程在进入C已经拿到锁的情况下进入D方法就会自动拿到锁 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁这些锁实际上是按照锁的状态来区分，并且是专门针对synchronized关键字来说的，但是在对这四种锁描述之前需要对一些概念进行了解:对象头和Monitor 一些基本概念Hotspot虚拟机中，对象在虚拟机中的布局分为3部分，分别是对象头、实例数据、对齐填充普通对象的对象头包括两部分:MarkWord和ClassMetaData Address(类型指针)，如果是数组对象还额外包括一个额外的数组长度部分 Markword用于存储对象自身的运行数据，如HashCode,GC分代年龄，锁状态标志，线程持有的锁、偏向线程ID,偏向时间戳等等，占用内存大小跟虚拟机位长一致Kclass Pointer类型指针，指向对象的类元数据，虚拟机通过这个指针确定该对象是哪个类的实例 Array Length数组长度 对象需要存储的数据很多，这已经超出了32bit或者是64bit能表示的限度，此外对象头信息是对象自定义的数据无关的额外存储成本，在考虑虚拟机空间效率的时候，MarkWord被设计成一个非固定的数据结构用来在极小的空间里面存储尽量多的信息，它会根据对象的状态复用自己的存储空间，也就是说MarkWord中存储的内容会伴随着锁的状态变化而变化。 例如在32bit的hotspot的虚拟机中，其各个锁状态下的存储内容如下所示 图片引用自Synchronized与三种锁态 MonitorMonitor可以理解为一个同步工具或一种同步机制。每一个Java对象都有一个看不见的锁，称为内部锁或Monitor锁，这个Monitor锁实际上就存在于对象的对象头中，对象头中的若干标志位用于标识锁的锁定状态和被哪个线程拥有，在一个线程需要使用一个对象之前，需要先获得它的内置锁，使用之后还需要释放这个内置锁，在使用过程中其它线程无法获取这个锁。 Synchronized概述Synchronized在JVM里面的实现是基于进入和退出Monitor对象来获取对象锁从而实现方法同步和代码块同步，不同虚拟机的实现细节可能不一样，但都可以通过成对的MonitorEnter和MonitorExit指令来实现，而MonitorEnter和MonitorExit的执行是通过调用操作系统的互斥原语Mutex Lock来实现的，被阻塞的线程会被挂起等待重新调度，会导致CPU在用户态和内核态两个态之间进行切换，比较耗性能，这也是为什么大家对synchronized的一贯印象就是性能较差的原因，jdk在1.6之后对sychronized进行了一系列调整，后来实际上跟Lock的性能不相上下，其实默认还是推荐用synchronized的，语义清晰、操作简单、无需手动关闭 同步方法是通过ACC_SYNCHRONIZED标识符来实现同步的同步代码块是通过MonitorEnter和MonitorExit两个指令来实现的 MonitorEnter插入在同步代码块的起始位置，当代码执行到该指令时，将会尝试获取该对象的monitor的所有权，即尝试获取该对象的锁MonitorExitMonitorExit插入在方法结束和异常处，JVM保证每个MonitorEnter必须有相应的MonitorExit 无锁无锁没有对共享资源进行锁定，所有的线程都能访问并修改资源，但是只有一个线程能修改成功，如果多个线程同时修改同一个值，一定会有一个线程会成功，其他修改失败的线程会不断重试(自旋)直到修改成功，这种无锁的情况实际上适用于竞争度不高(读多写少)的情况下，这样自旋一会儿就能获取到资源的修改权，否则自旋非常浪费CPU资源 偏向锁简介Hotspot虚拟机的作者发现在大多数情况下不仅不存在锁的竞争，甚至锁总是同一个线程多次获得，所以为了降低获取锁的代价而引入了偏向锁。偏向锁就是指一段代码一直被一个线程访问，那么线程会自动获取锁，直接执行同步代码块，从而降低获取锁的代价 使用场景只有一个线程进入临界区 锁的获取 获取对象的markword 检测MarkWord是否为可偏向状态 如果为可偏向，并且markword中指向的线程是当前线程则执行同步代码 如果为可偏向，但指向的线程不是当前线程，通过cas竞争，若竞争成功，则执行同步代码，如果不成功执行5 偏向锁竞争不成功，证明存在多线程竞争情况，此时偏向锁不再适用，到达全局安全点，获得偏向锁的线程将被挂起，偏向锁升级为轻量级锁，被阻塞在安全点的线程继续往下执行同步代码 锁的释放线程拥有的偏向锁并不会主动释放，需要等待其他线程来竞争，偏向锁的撤销需要等待全局安全点(没有正在执行的代码的时间点),步骤如下 判断锁对象是否还处于锁定的状态，如果否，则将其恢复到无锁状态，允许其它线程竞争，如果还处于锁定状态，则挂起拥有偏向锁的线程，并将指向该线程的lock record的指针放入对象头的mark word中，升级为轻量级锁(00),然后恢复刚才拥有偏向锁的线程，进入轻量级锁的竞争模式 缺点如果存在锁的竞争，会带来锁撤销的消耗 轻量级锁简介当锁是偏向锁的时候，被其他线程访问出现锁的竞争的时候，就会升级为偏向锁，或者显式关闭偏向锁(jdk1.6以后默认开启，并且默认加的是偏向锁，显式关闭后，默认加的就是轻量级锁),其他线程会通过自旋的方式尝试获取锁，不会阻塞，从而提高性能，一般来说，轻量级锁认为竞争存在，但是竞争的程度较轻，一般两个线程对同一个锁的操作都会错开，或者一个没有拿到锁的线程稍微自旋一会儿就可以拿到锁，如果超过一定自旋的次数后还是没有拿到锁，或者一个线程持有锁，一个线程在自旋的时候，这时候又有第三个线程来竞争锁的时候，轻量级锁就会升级为重量级锁 使用场景多个线程交替进入临界区，同步代码执行速度较快 锁的获取 判断当前对象是否为无锁状态(是否为偏向锁位0，锁标志位01)，若是,JVM会在当前线程的栈帧中建立一个名为Lock Record的空间，用于存储锁对象目前MarkWord的拷贝 将对象头中的MarkWord拷贝到LockRecord中 拷贝成功后，JVM利用CAS尝试将对象头中MarkWord中设置为指向LockRecord的指针,如果成功执行4，否则执行5 更新成功，这个线程就拥有了这个对象的锁，并且将对象MarkWord的标志位转为00，表示此对象处于轻量级锁状态 更新失败，虚拟机会检查对象头中MarkWord是否指向当前线程的栈帧，如果是，代表当前线程已经获取到了这个对象的锁，可以直接执行同步代码，否则自旋执行步骤3，如果自旋结束还没有获得锁，则说明锁的竞争比较激烈，需要膨胀为重量级锁，将MarkWord里面的锁标志位置为10，MarkWord里面这时存放的是重量级锁的指针 锁的释放 使用CAS用线程中MarkWord的拷贝替换对象头中的MarkWord,替换成功则执行2，否则执行3 替换成功，则锁释放成功，整个同步过程完成，对象恢复到无锁的状态 替换失败，说明有其他线程正在竞争锁，在释放锁的同时，唤醒被挂起的线程 缺点 始终得不到锁的线程，自旋会消耗CPU资源，造成浪费 重量级锁重量级锁依靠对象的Monitor锁实现，而Monitor锁又依赖操作系统的Mutex Lock(互斥锁)来实现的 在同步代码块中，jvm通过monitorenter和monitorexit实现同步锁的获取和释放。 monitorenter在编译后插入到同步代码块的起始位置，monitorexit被插入到方法结束和异常处。 线程执行monitorenter的时候会尝试获取对象对应的monitor的所有权，即尝试获对象锁线程执行monitorexit的时候将会把进入次数-1直到进入次数为0的时候释放锁 同一时刻只有一个线程能够成功，其他失败的线程会放弃锁的竞争被阻塞，放到同步队列中并且等待锁的释放，状态变为Blocked状态，当这个对象锁被释放的时候，会通知队列中等待这个对象锁的线程，使其可以重新竞争锁 使用场景多个线程同时进入临界区，同步代码执行时间较长 Synchronized用法修饰实例方法获取的是对象锁，锁住的是类的实例对象 修饰静态方法被锁住的是类的class对象 修饰代码块被锁住的是实例对象","categories":[{"name":"java中的锁","slug":"java中的锁","permalink":"http://example.com/categories/java%E4%B8%AD%E7%9A%84%E9%94%81/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"mysql事务隔离","slug":"sql-事务隔离级别","date":"2021-04-04T16:00:00.000Z","updated":"2022-01-28T07:47:59.529Z","comments":true,"path":"2021/04/05/sql-事务隔离级别/","link":"","permalink":"http://example.com/2021/04/05/sql-%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","excerpt":"关于mysql事务隔离","text":"数据库的隔离级别（事务在读另一个事务的数据）数据库事务的隔离级别由低到高依次为: Read uncommitted 、Read committed 、Repeatable read 、Serializable。 1. Read uncommitted 读未提交 A事务能读取B事务整个过程的数据。如果中途回滚、可能会造成回滚前后数据不一致（脏读） 2. Read committed 读提交 解决脏读：事务提交后才能获取到修改的数据 A事务只能读取B事务开始前与提交后的数据。A事务有两次查询某个数据，第一次是在B事务开始前，第二次在B事务提交后，两次查询结果不同（不可重复读） 3. Repeatable read 重复读（mysql默认开启的隔离级别） 解决不可重复读。 A事务读取某个数据时，B事务可读但不可以做修改，直到A事务提交之后。 4. 串行化(Serializable) 解决了幻读的问题。 事务只能一个接着一个地执行，不能并发执行，隔离级别最重。 MVCC1//todo ...","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"事务隔离","slug":"mysql/事务隔离","permalink":"http://example.com/categories/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"事务隔离","slug":"事务隔离","permalink":"http://example.com/tags/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"}]},{"title":"记一次docker部署mysql主从复制(单向)","slug":"sql-记一次docker部署mysql主从复制-单向","date":"2020-09-01T16:00:00.000Z","updated":"2022-01-17T13:35:31.550Z","comments":true,"path":"2020/09/02/sql-记一次docker部署mysql主从复制-单向/","link":"","permalink":"http://example.com/2020/09/02/sql-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%83%A8%E7%BD%B2mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%8D%95%E5%90%91/","excerpt":"记一次docker部署mysql主从复制(单向)","text":"原理：主数据库操作mysql时，生成二进制日志。从数据库向主数据库请求到更新的二进制日志后，根据日志同步从数据库；MySQL主从复制的三个线程：1.主节点： binarylog dump thread(用于记录日志binary log) 2.从节点：I/O thread(接收主节点binlog dump 进程发来的更新以后，保存到relay-log中) 3.从节点：SQL thread(负责读取relay log，解析成具体的操作并执行，最终保证主从数据的一致性) 如下图所示: 环境：docker、mysql版本8.0步骤： 配置一个服务器为 master。 配置一个服务器为 slave。 将 slave 连接到 master。 配置master:将一台服务器配置为 master，要确保服务器有 binlog 和 唯一的服务器ID。在 my.cnf 中加入以下配置： 123log-bin=master-binlog-bin-index=master-bin.indexserver-id=1 在 Master 上创建一个特殊复制权限的用户给slave使用: 12mysql&gt; CREATE USER &#x27;username&#x27; IDENTIFIED BY &#x27;password&#x27;;mysql&gt; GRANT REPLICATION SLAVE,SUPER,RELOAD ON *.* TO &#x27;username&#x27;; 配置slave:在 my.cnf 中加入以下配置(relay 是中继的意思)： 123server-id=2relay-log=slave-relay-binrelay-log-index=slave-relay-bin.index 让slave连接master:在 slave 上执行： 1234567mysql&gt; CHANGE MASTER TO MASTER_HOST = &#x27;172.17.0.2&#x27;, MASTER_PORT = 3306, MASTER_USER = &#x27;username&#x27;, MASTER_PASSWORD = &#x27;password&#x27;, GET_MASTER_PUBLIC_KEY = 1;mysql&gt; START SLAVE; 显示是否配置成功，slave中执行： 1mysql&gt; SHOW SLAVE STATUS; 1234567891011121314151617181920212223242526272829mysql&gt; show slave status \\G:*************************** 1. row ***************************​ Slave_IO_State: Waiting for source to send event​ Master_Host: 172.17.0.3​ Master_User: repl​ Master_Port: 3306​ Connect_Retry: 60​ Master_Log_File: mysql-bin.000009​ Read_Master_Log_Pos: 156​ Relay_Log_File: cd30dbb10151-relay-bin.000007​ Relay_Log_Pos: 371​ Relay_Master_Log_File: mysql-bin.000009​ Slave_IO_Running: Yes​ Slave_SQL_Running: Yes​ Replicate_Do_DB:","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"关于mysql优化","slug":"sql-mysql优化","date":"2020-07-07T16:00:00.000Z","updated":"2022-01-28T08:43:25.948Z","comments":true,"path":"2020/07/08/sql-mysql优化/","link":"","permalink":"http://example.com/2020/07/08/sql-mysql%E4%BC%98%E5%8C%96/","excerpt":"关于mysql优化","text":"索引列的顺序索引的选择性是指: 不重复的索引值数和记录总数的比值。 让选择性最强的索引列放在前面。例如下面显示的结果中 customer_id 的选择性比 staff_id 更高，因此最好把 customer_id 列放在多列索引的前面。 1234SELECT COUNT(DISTINCT staff_id)/COUNT(*) AS staff_id_selectivity,COUNT(DISTINCT customer_id)/COUNT(*) AS customer_id_selectivity,COUNT(*)FROM payment; 123 staff_id_selectivity: 0.0001customer_id_selectivity: 0.0373 COUNT(*): 16049 否定查询不能使用索引1select name from user where id not in (1,3,4); 应该修改为: 1select name from user where id in (2,5,6); 前导模糊查询不能使用索引, 如: 1select name from user where name like &#x27;%zhangsan&#x27; 非前导则可以: 1select name from user where name like &#x27;zhangsan%&#x27; 建议可以考虑使用 Lucene 等全文索引工具来代替频繁的模糊查询。 数据区分不明显的不建议创建索引如 user 表中的性别字段，可以明显区分的才建议创建索引，如身份证等字段。 字段的默认值不要为 null这样会带来和预期不一致的查询结果。 在字段上进行计算不能命中索引1select name from user where FROM_UNIXTIME(create_time) &lt; CURDATE(); 应该修改为: 1select name from user where create_time &lt; FROM_UNIXTIME(CURDATE()); 最左前缀问题如果给 user 表中的 username pwd 字段创建了复合索引那么使用以下SQL 都是可以命中索引: 12345select username from user where username=&#x27;zhangsan&#x27; and pwd =&#x27;axsedf1sd&#x27;select username from user where pwd =&#x27;axsedf1sd&#x27; and username=&#x27;zhangsan&#x27;select username from user where username=&#x27;zhangsan&#x27; 但是使用 1select username from user where pwd =&#x27;axsedf1sd&#x27; 是不能命中索引的。 如果明确知道只有一条记录返回1select name from user where username=&#x27;zhangsan&#x27; limit 1 可以提高效率，可以让数据库停止游标移动。 不要让数据库帮我们做强制类型转换1select name from user where telno=18722222222 这样虽然可以查出数据，但是会导致全表扫描。需要修改为 1select name from user where telno=&#x27;18722222222&#x27; 如果需要进行 join 的字段两表的字段类型要相同, 不然也不会命中索引","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"Lambda表达式不只是匿名类的语法糖","slug":"Java-Lambda表达式不只是匿名类的语法糖","date":"2020-06-08T16:00:00.000Z","updated":"2022-01-28T08:42:59.913Z","comments":true,"path":"2020/06/09/Java-Lambda表达式不只是匿名类的语法糖/","link":"","permalink":"http://example.com/2020/06/09/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E5%8F%AA%E6%98%AF%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/","excerpt":"Lambda表达式不只是匿名类的语法糖","text":"表达式简介Lambda表达式通常使用(argument) -&gt; (body)语法书写，如👇 12(arg1, arg2...) -&gt; &#123;body&#125;(type1 arg1, type2 arg2...) -&gt; &#123;body&#125; 一些Lambda表达式例子👇 12345(int a,int b) -&gt; &#123;return a + b&#125;() -&gt; System.out.println(&quot;Hello World&quot;);(String s) -&gt; &#123;System.out.println(s);&#125;() -&gt; 42() -&gt; &#123;return 3.1415&#125; 表达式结构 一个Lambda表达式可以有零个或多个参数 参数的类型既可以明确声明，也可以根据上下文来推断。例如：(int a)与(a)效果相同 所有参数需包含在圆括号内，参数之间用逗号相隔。例如：(a,b)或(int a, int b)或(String a, int b, float c) 空圆括号代表参数集为空。例如() -&gt; 42 当只有一个参数，且其类型可推导时，圆括号可省略，如a -&gt; return a*a Lambda表达式的主体可能包含零条或多条语句 如果Lambda表达式的主体只有一条语句，花括号可省略。匿名函数的返回类型与该主体表达式一致 如果Lambda表达式的主体包含一条以上语句，则表达式必须包含在花括号中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空 函数式接口在Java中，Marker（标记）类型的接口是一种没有方法或属性声明的接口。简单地说，Marker接口是空接口。相似地，函数式接口是只包含一个抽象方法声明的接口。 java.lang.Runnable就是一种函数式接口，在Runnable接口中之声明了一个方法void run()，相似地，ActionListener接口也是一种函数式接口，我们使用匿名内部类来实例化函数式接口的对象，有了Lambda表达式，这一方式可以得到简化。 每个Lambda表达式都能隐式地赋值给函数式接口，例如，我们可以通过Lambda表达式创建Runnable接口的引用👇 1Runnable r = () -&gt; System.out.println(&quot;Hello World&quot;); 当不指明函数式接口时，编译器会自动解释这种转化👇 123new Thread( () -&gt; System.out.println(&quot;Hello World&quot;);).start(); 因此，在上面的代码中，编译器会自动推断：根据线程类的构造函数签名public Thread(Runnable r) &#123;&#125;，将该Lambda表达式赋给Runnable接口。 其他Lambda表达式及其函数式接口： 12345678910Consumer&lt;Integer&gt; c = (int x) -&gt; &#123;System.out.println(x)&#125;;BiConsumer&lt;Integer, String&gt; b = (Integer x, String y) -&gt; System.out.println(x + &quot; : &quot; + y);Predicater&lt;String&gt; p = (String s) -&gt; &#123;s == null&#125;;以下是一种自定义的函数式接口👇```java@FunctionalInterfacepublic interface WorkerInterface &#123; void doSomeWork();&#125; 定义好函数式接口后，我们就可以使用了👇 123456789101112131415161718public class WorkerInterfaceTest &#123; public static void execute(WorkerInterface worker) &#123; worker.doSomeWork(); &#125; public static void main(String[] args) &#123; // old method in java 7 execute(new WorkerInterface() &#123; @Override public void doSomeWork() &#123; System.out.println(&quot;Work in Java 7&quot;); &#125; &#125;); // new method in java 8 execute( () -&gt; &#123;System.out.println(&quot;Work in Java 8&quot;)&#125;); &#125;&#125; 应用 线程通过Lambda初始化 PS：Lambda可以视为一个匿名内部类对象，我们创建的Lambda表达式实质是创建一个对象，所以只要我们创建了接口对应的对象，然后将对应传递给指定的方法，即可完成方法的实际调用 12345678910// old methodnew Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println(&quot;Hello From Java 7&quot;); &#125;&#125;); // new methodnew Thread( () -&gt; System.out.println(&quot;Hello From Java 8&quot;); ).start(); Swing的事件处理 12345678910// old methodbutton.addActionListener(new ActionListener() &#123; @Override public void actionPerformed(ActionEvent e) &#123; System.out.println(&quot;Using old method click the button&quot;); &#125;&#125;); // new methodbutton.addActionListener( (e) -&gt; System.out.println(&quot;Using new method click the button&quot;);); 打印给定数组中的所有元素 123456789101112// old methodList&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);for (Integer n : list) &#123; System.out.println(n);&#125; // new methodList&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);list.forEach(n -&gt; System.out.println(n)); // another methodlist.forEach(System.out::println); 打印list中每个元素的平方 12345678910// old methodList&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);for (Integer n : list) &#123; int x = n * n; System.out.println(x);&#125; // new methodList&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7);list.stream().map((x) -&gt; x*x).forEach(System.out::println); Lambda与匿名内部类 对于匿名内部类，关键字this解读为匿名类 对于Lambda表达式，关键词this解读为Lambda的外部类，且Java在编译代码时将Lambda表达式转化为类内的私有函数，它使用Java 7中的invokedynamic指令动态绑定该方法","categories":[{"name":"java8 java","slug":"java8-java","permalink":"http://example.com/categories/java8-java/"}],"tags":[{"name":"java java8","slug":"java-java8","permalink":"http://example.com/tags/java-java8/"}]},{"title":"docker常用命令","slug":"docker-docker常用命令","date":"2020-06-08T16:00:00.000Z","updated":"2022-01-28T07:59:42.597Z","comments":true,"path":"2020/06/09/docker-docker常用命令/","link":"","permalink":"http://example.com/2020/06/09/docker-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","excerpt":"docker命令","text":"一、镜像相关1 command describe docker images 查看已存在的镜像 docker images -a docker images -q docker images -qa docker images –digests 查看已存在的镜像的内部 查看已存在的镜像的ID 查看全部镜像的id 查看镜像说明 docker search xxx 查看某个镜像 (xxx=tomcat就是查看tomcat的镜像说明) docker pull xxx:tag 下载某个镜像 (xxx：镜像名，tag：镜像版本) docker rmi name/id:tag docker rmi -f name/id:tag 删除某个镜像 强制删除某个镜像 二、DockerFile name describe FROM 基础镜像，当前新镜像是基于哪个镜像的（scratch就相当于Java里面的Object） MAINTAINER 镜像维护者的姓名和邮箱地址 RUN 容器构建时需要运行的命令 EXPOSE 当前容器对外暴露出的端口 WORKDIR 指定在创建容器后，终端默认登录进来的工作目录，一个 ENV 用来在构建镜像过程中涉及环境变量 ADD 从宿主机拷贝并解压 COPY 从宿主机只拷贝 VOLUME 容器数据卷，用于保存和持久化工作 CMD 指定一个容器启动时要运行的命令,只有最后一个会生效，并且会被docker run 后面的参数替换掉 ENTRYPOINT 指定一个容器启动时要运行的命令，每一个都会被生效 ONBUILD 当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发 三、容器相关 command describe docker ps docker ps -as docker ps -l docker ps -n 3 查看正在运行的容器 查看全部的容器 上一次运行的容器 上三次运行的容器 docker start id 启动容器 docker stop id 关闭容器 docker kill id 强制停止 docker rm id 删除容器 docker rm -f id 强制删除容器 docker exec -it id xxx docker exec -it id /bin/bash 在容器外面去执行一个命令，xxx 就是你要执行的命令 进入某个容器 ctrl+p+Q 退出不关闭容器","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"关于redis缓存的问题","slug":"redis-redis的几总问题","date":"2020-03-17T16:00:00.000Z","updated":"2022-01-28T07:55:47.345Z","comments":true,"path":"2020/03/18/redis-redis的几总问题/","link":"","permalink":"http://example.com/2020/03/18/redis-redis%E7%9A%84%E5%87%A0%E6%80%BB%E9%97%AE%E9%A2%98/","excerpt":"redis","text":"缓存穿透 问题来源 缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求。由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。 在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。 如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。 解决方案 接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截； 从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击 布隆过滤器。bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小， 缓存击穿 问题来源 缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。 解决方案 1、设置热点数据永远不过期。 2、接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些 服务 不可用时候，进行熔断，失败快速返回机制。 3、加互斥锁 缓存雪崩 问题来源 缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。 解决方案 缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。 如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。 设置热点数据永远不过期。","categories":[{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"CSRF跨站请求伪造","slug":"网络安全-csrf","date":"2019-09-17T16:00:00.000Z","updated":"2022-01-28T08:43:38.879Z","comments":true,"path":"2019/09/18/网络安全-csrf/","link":"","permalink":"http://example.com/2019/09/18/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8-csrf/","excerpt":"跨站请求伪造","text":"什么是CSRF攻击?CSRF: Cross Site Regust Forgery跨站请求伪造 一个正常的请求会将合法用户的session id保存到浏览器的cookie。这时候，如果用户在浏览器中打来另一个tab页，那这个tab页也是可以获得浏览器的cookie。黑客就可以利用这个cookie信息进行攻击。 攻击过程原理及过程 用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A； 在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A； 用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B； 网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A； 浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。 例子1、某银行网站A可以以GET请求的方式发起转账操作。www.xx.com/transfor.do?accountNum= 100&amp;money= 1000,accountNum表示目标账户。这个请求肯定是需要登录才可以正常访问的。 2、攻击者在某个论坛或者网站上，上传一 个图片，链接地址是www.xxx.com/transfer.do?accountNum=888&amp;money=10000,其中这个accountNum就是攻击者自己的银行账户。 3、如果有一个用户，登录了银行网站，然后又打开浏览器的另一个tab页，点击了这个图片。这时，银行就会受理到一个带了正确cookie的请求，就会完成转账。用户的钱就被盗了。 CSRF漏洞检测检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。 随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder等。 以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。 CSRF防止方式:简述1、尽量使用POST请求，限制GET请求。POST请求可以带请求体，攻击者就不容易伪造出请求。 2、将cookie设置 为HttpOnly : respose.setHeader(“Set-Cookie”,” cookiename=cookievalue;HttpOnly”)。 3、增加token：在请求中放入一个攻击者无法伪造的信息，并且该信息不存在于cookie当中。&lt;input type= &#39;hidden’value= &#39; adfasdf&#39;/&gt;这也是Spring Security框架中采用的防范方式。","categories":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"}]},{"title":"关于反射","slug":"Java-关于反射","date":"2019-06-08T16:00:00.000Z","updated":"2022-01-27T02:05:08.489Z","comments":true,"path":"2019/06/09/Java-关于反射/","link":"","permalink":"http://example.com/2019/06/09/Java-%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84/","excerpt":"关于反射","text":"常用类的概述Constructor类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象； Field表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)； Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)，","categories":[{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"Maven依赖管理","slug":"Java-2018-07-24-maven依赖管理","date":"2019-04-09T16:00:00.000Z","updated":"2022-01-17T13:10:59.925Z","comments":true,"path":"2019/04/10/Java-2018-07-24-maven依赖管理/","link":"","permalink":"http://example.com/2019/04/10/Java-2018-07-24-maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/","excerpt":"Maven依赖管理","text":"Maven依赖管理本文主要总结了，在多module的项目中，父子依赖关系是如何创建及管理的。 前提现在假设有这样一个项目：实现一个简单的rpc，则我们需要三个模块： 注册中心 服务消费方 服务提供方 其中，服务提供方需要注册到注册中心，服务消费方需要从注册中心获取服务提供方的列表，则三个模块都需要注册中心的依赖；服务消费方和服务提供方之间需要进行通信，则这两个模块都需要通信的依赖。 如何创建一个父子模块的依赖关系首先，父子模块的关系体现在 文件目录结构上的层级 pom中的管理 其中，我们在预设的父模块pom.xml中添加如下标签： 12345&lt;modules&gt; &lt;module&gt;rpc-discover&lt;/module&gt; &lt;module&gt;rpc-provider&lt;/module&gt; &lt;module&gt;rpc-consumer&lt;/module&gt;&lt;/modules&gt; 这样，我们就指定了rpc-discover、rpc-provider、rpc-consumer为rpc-root的子模块，子模块可以使用父模块的依赖。 dependencyManagement在rpc-root中，通过使用&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;标签来管理依赖的版本。 rpc-root.xml 12345678910111213141516171819202122232425&lt;groupId&gt;me.sxl&lt;/groupId&gt;&lt;artifactId&gt;rpc-root&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;pom&lt;/packaging&gt; &lt;modules&gt; &lt;module&gt;rpc-discover&lt;/module&gt; &lt;module&gt;rpc-provider&lt;/module&gt; &lt;module&gt;rpc-consumer&lt;/module&gt;&lt;/modules&gt; &lt;properties&gt; &lt;lombok.version&gt;1.18.8&lt;/lombok.version&gt;&lt;/properties&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; rpc-discover.xml 1234567891011121314&lt;parent&gt; &lt;groupId&gt;me.sxl&lt;/groupId&gt; &lt;artifactId&gt;rpc-root&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;artifactId&gt;rpc-discover&lt;/artifactId&gt;&lt;packaging&gt;jar&lt;/packaging&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 这样，我们就可以在rpc-discover模块中使用版本为1.18.8的lombok依赖，再添加更多的依赖，只需要在父模块中对依赖的版本进行统一的管理，子模块只需要继承即可使用。 dependencies不同于&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;这对标签，在&lt;dependencies&gt;&lt;/dependencies&gt;中引入的依赖都会被子项目自动引入，并默认被所有的子项目继承。 rpc-root.xml 12345678910111213141516171819202122&lt;groupId&gt;me.sxl&lt;/groupId&gt;&lt;artifactId&gt;rpc-root&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;modules&gt; &lt;module&gt;rpc-discover&lt;/module&gt; &lt;module&gt;rpc-provider&lt;/module&gt; &lt;module&gt;rpc-consumer&lt;/module&gt;&lt;/modules&gt; &lt;properties&gt; &lt;lombok.version&gt;1.18.8&lt;/lombok.version&gt;&lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; rpc-discover.xml 123456&lt;parent&gt; &lt;groupId&gt;me.sxl&lt;/groupId&gt; &lt;artifactId&gt;rpc-root&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;/parent&gt;&lt;artifactId&gt;rpc-discover&lt;/artifactId&gt; 总结dependencyManagement内只进行依赖声明，不实现引入，所以子项目使用dependencyManagement的依赖需要显示地声明；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且 version 和 scope 都读取自父 pom; 另外如果子项目中指定了版本号，那么会使用子项目中指定的版本。 dependencies的子项目回自动继承声明的全部依赖。","categories":[{"name":"maven","slug":"maven","permalink":"http://example.com/categories/maven/"}],"tags":[{"name":"maven","slug":"maven","permalink":"http://example.com/tags/maven/"}]},{"title":"ssh 配置","slug":"git-2017-03-18-ssh","date":"2019-03-09T12:34:07.000Z","updated":"2022-01-28T08:42:47.397Z","comments":true,"path":"2019/03/09/git-2017-03-18-ssh/","link":"","permalink":"http://example.com/2019/03/09/git-2017-03-18-ssh/","excerpt":"gulp构建一个小项目","text":"ssh多个秘钥管理ssh-agent服务管理员模式启动Windows PowerShell1.使用下面两个命令行启动ssh-agent服务1Set-Service -Name ssh-agent -StartupType Manual 1Start-Service ssh-agent 2.添加到代理 1ssh-add ~/.ssh/自定义秘钥名称 3.配置git1git config --global user.email “1044934446@qq.com” 4.生成密钥 1ssh-keygen -t rsa","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[{"name":"gulp","slug":"gulp","permalink":"http://example.com/tags/gulp/"}]}],"categories":[{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"java中的锁","slug":"java中的锁","permalink":"http://example.com/categories/java%E4%B8%AD%E7%9A%84%E9%94%81/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"事务隔离","slug":"mysql/事务隔离","permalink":"http://example.com/categories/mysql/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"},{"name":"java8 java","slug":"java8-java","permalink":"http://example.com/categories/java8-java/"},{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"},{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"},{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"java","slug":"java","permalink":"http://example.com/categories/java/"},{"name":"maven","slug":"maven","permalink":"http://example.com/categories/maven/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"}],"tags":[{"name":"消息队列","slug":"消息队列","permalink":"http://example.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"},{"name":"事务隔离","slug":"事务隔离","permalink":"http://example.com/tags/%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB/"},{"name":"java java8","slug":"java-java8","permalink":"http://example.com/tags/java-java8/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"},{"name":"网络安全","slug":"网络安全","permalink":"http://example.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"maven","slug":"maven","permalink":"http://example.com/tags/maven/"},{"name":"gulp","slug":"gulp","permalink":"http://example.com/tags/gulp/"}]}