<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/01/16/docker-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/01/16/docker-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>layout: post<br>title:  “docker常用命令”<br>date:   2019-04-3<br>categories: [docker]<br>tags: [docker]<br>excerpt: docker常用命令</p><h3 id="一、镜像相关"><a href="#一、镜像相关" class="headerlink" title="一、镜像相关"></a>一、镜像相关</h3><table><thead><tr><th>command</th><th>describe</th></tr></thead><tbody><tr><td>docker images</td><td>查看已存在的镜像</td></tr><tr><td>docker images -a docker images -q docker images -qa docker images –digests</td><td>查看已存在的镜像的内部 查看已存在的镜像的ID 查看全部镜像的id 查看镜像说明</td></tr><tr><td>docker search xxx</td><td>查看某个镜像 (xxx=tomcat就是查看tomcat的镜像说明)</td></tr><tr><td>docker pull xxx:tag</td><td>下载某个镜像 (xxx：镜像名，tag：镜像版本)</td></tr><tr><td>docker rmi name/id:tag docker rmi -f name/id:tag</td><td>删除某个镜像 强制删除某个镜像</td></tr></tbody></table><h3 id="二、DockerFile"><a href="#二、DockerFile" class="headerlink" title="二、DockerFile"></a>二、DockerFile</h3><table><thead><tr><th>name</th><th>describe</th></tr></thead><tbody><tr><td>FROM</td><td>基础镜像，当前新镜像是基于哪个镜像的（scratch就相当于Java里面的Object）</td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td>RUN</td><td>容器构建时需要运行的命令</td></tr><tr><td>EXPOSE</td><td>当前容器对外暴露出的端口</td></tr><tr><td>WORKDIR</td><td>指定在创建容器后，终端默认登录进来的工作目录，一个</td></tr><tr><td>ENV</td><td>用来在构建镜像过程中涉及环境变量</td></tr><tr><td>ADD</td><td>从宿主机拷贝并解压</td></tr><tr><td>COPY</td><td>从宿主机只拷贝</td></tr><tr><td>VOLUME</td><td>容器数据卷，用于保存和持久化工作</td></tr><tr><td>CMD</td><td>指定一个容器启动时要运行的命令,只有最后一个会生效，并且会被docker run 后面的参数替换掉</td></tr><tr><td>ENTRYPOINT</td><td>指定一个容器启动时要运行的命令，每一个都会被生效</td></tr><tr><td>ONBUILD</td><td>当构建一个被继承的Dockerfile时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD被触发</td></tr></tbody></table><h3 id="三、容器相关"><a href="#三、容器相关" class="headerlink" title="三、容器相关"></a>三、容器相关</h3><table><thead><tr><th align="left">command</th><th>describe</th></tr></thead><tbody><tr><td align="left">docker ps docker ps -as docker ps -l docker ps -n 3</td><td>查看正在运行的容器 查看全部的容器 上一次运行的容器 上三次运行的容器</td></tr><tr><td align="left">docker start id</td><td>启动容器</td></tr><tr><td align="left">docker stop id</td><td>关闭容器</td></tr><tr><td align="left">docker kill id</td><td>强制停止</td></tr><tr><td align="left">docker rm id</td><td>删除容器</td></tr><tr><td align="left">docker rm -f id</td><td>强制删除容器</td></tr><tr><td align="left">docker exec -it id xxx docker exec -it id /bin/bash</td><td>在容器外面去执行一个命令，xxx 就是你要执行的命令 进入某个容器</td></tr><tr><td align="left">ctrl+p+Q</td><td>退出不关闭容器</td></tr><tr><td align="left"></td><td></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/13/Java-%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/01/13/Java-%E5%85%B3%E4%BA%8E%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="常用类的概述"><a href="#常用类的概述" class="headerlink" title="常用类的概述"></a>常用类的概述</h3><p><em><strong>Constructor</strong></em>类表示的是Class 对象所表示的类的构造方法，利用它可以在运行时动态创建对象；</p><p><em><strong>Field</strong></em>表示Class对象所表示的类的成员变量，通过它可以在运行时动态修改成员变量的属性值(包含private)；</p><p><em><strong>Method</strong></em>表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法(包含private)，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次docker部署mysql主从复制(单向)</title>
      <link href="/2019/04/03/sql-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%83%A8%E7%BD%B2mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%8D%95%E5%90%91/"/>
      <url>/2019/04/03/sql-%E8%AE%B0%E4%B8%80%E6%AC%A1docker%E9%83%A8%E7%BD%B2mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6-%E5%8D%95%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><h5 id="主数据库操作mysql时，生成二进制日志。从数据库向主数据库请求到更新的二进制日志后，根据日志同步从数据库；"><a href="#主数据库操作mysql时，生成二进制日志。从数据库向主数据库请求到更新的二进制日志后，根据日志同步从数据库；" class="headerlink" title="主数据库操作mysql时，生成二进制日志。从数据库向主数据库请求到更新的二进制日志后，根据日志同步从数据库；"></a>主数据库操作mysql时，生成二进制日志。从数据库向主数据库请求到更新的二进制日志后，根据日志同步从数据库；</h5><h4 id="MySQL主从复制的三个线程："><a href="#MySQL主从复制的三个线程：" class="headerlink" title="MySQL主从复制的三个线程："></a>MySQL主从复制的三个线程：</h4><p><strong>1.主节点： binarylog dump thread(用于记录日志binary log)</strong></p><p><strong>2.从节点：I/O thread(接收主节点binlog dump 进程发来的更新以后，保存到relay-log中)</strong></p><p><strong>3.从节点：SQL thread(负责读取relay log，解析成具体的操作并执行，最终保证主从数据的一致性)</strong></p><p>如下图所示:</p><p><img src="https://pic1.zhimg.com/80/v2-1b0c3f31bd398c39b9e0930059b0ca24_1440w.jpg" alt="img"></p><h3 id="环境：docker、mysql版本8-0"><a href="#环境：docker、mysql版本8-0" class="headerlink" title="环境：docker、mysql版本8.0"></a>环境：docker、mysql版本8.0</h3><p><strong>步骤：</strong></p><ol><li><strong>配置一个服务器为 master。</strong></li><li><strong>配置一个服务器为 slave。</strong></li><li><strong>将 slave 连接到 master。</strong></li></ol><h3 id="配置master"><a href="#配置master" class="headerlink" title="配置master:"></a>配置master:</h3><h5 id="将一台服务器配置为-master，要确保服务器有-binlog-和-唯一的服务器ID。"><a href="#将一台服务器配置为-master，要确保服务器有-binlog-和-唯一的服务器ID。" class="headerlink" title="将一台服务器配置为 master，要确保服务器有 binlog 和 唯一的服务器ID。"></a>将一台服务器配置为 master，要确保服务器有 binlog 和 唯一的服务器ID。</h5><p>在 my.cnf 中加入以下配置：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log-bin=master-bin</span><br><span class="line">log-bin-index=master-bin.index</span><br><span class="line">server-id=1</span><br></pre></td></tr></table></figure><p><strong>在 Master 上创建一个特殊复制权限的用户给slave使用:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;username&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE,SUPER,RELOAD ON *.* TO &#x27;username&#x27;;</span><br></pre></td></tr></table></figure><h3 id="配置slave"><a href="#配置slave" class="headerlink" title="配置slave:"></a>配置slave:</h3><p><strong>在 my.cnf 中加入以下配置(relay 是中继的意思)：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server-id=2</span><br><span class="line">relay-log=slave-relay-bin</span><br><span class="line">relay-log-index=slave-relay-bin.index</span><br></pre></td></tr></table></figure><h3 id="让slave连接master"><a href="#让slave连接master" class="headerlink" title="让slave连接master:"></a>让slave连接master:</h3><p>在 slave 上执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">             MASTER_HOST = &#x27;172.17.0.2&#x27;,</span><br><span class="line">             MASTER_PORT = 3306,</span><br><span class="line">             MASTER_USER = &#x27;username&#x27;,</span><br><span class="line">             MASTER_PASSWORD = &#x27;password&#x27;,</span><br><span class="line">             GET_MASTER_PUBLIC_KEY = 1;</span><br><span class="line">mysql&gt; START SLAVE;</span><br></pre></td></tr></table></figure><p><strong>显示是否配置成功，slave中执行：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW SLAVE STATUS;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status \G:</span></span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line"></span><br><span class="line">​        Slave_IO_State: Waiting for source to send event</span><br><span class="line"></span><br><span class="line">​         Master_Host: 172.17.0.3</span><br><span class="line"></span><br><span class="line">​         Master_User: repl</span><br><span class="line"></span><br><span class="line">​         Master_Port: 3306</span><br><span class="line"></span><br><span class="line">​        Connect_Retry: 60</span><br><span class="line"></span><br><span class="line">​       Master_Log_File: mysql-bin.000009</span><br><span class="line"></span><br><span class="line">​     Read_Master_Log_Pos: 156</span><br><span class="line"></span><br><span class="line">​        Relay_Log_File: cd30dbb10151-relay-bin.000007</span><br><span class="line"></span><br><span class="line">​        Relay_Log_Pos: 371</span><br><span class="line"></span><br><span class="line">​    Relay_Master_Log_File: mysql-bin.000009</span><br><span class="line"></span><br><span class="line">​       Slave_IO_Running: Yes</span><br><span class="line"></span><br><span class="line">​      Slave_SQL_Running: Yes</span><br><span class="line"></span><br><span class="line">​       Replicate_Do_DB: </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于mysql优化</title>
      <link href="/2019/04/03/sql-mysql%E4%BC%98%E5%8C%96/"/>
      <url>/2019/04/03/sql-mysql%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="否定查询不能使用索引"><a href="#否定查询不能使用索引" class="headerlink" title="否定查询不能使用索引"></a>否定查询不能使用索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>应该修改为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name from user where id in (2,5,6);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        @pdai: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>前导模糊查询不能使用索引, 如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%zhangsan&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>非前导则可以:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;zhangsan%&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>建议可以考虑使用 <code>Lucene</code> 等全文索引工具来代替频繁的模糊查询。</p><h2 id="数据区分不明显的不建议创建索引"><a href="#数据区分不明显的不建议创建索引" class="headerlink" title="数据区分不明显的不建议创建索引"></a>数据区分不明显的不建议创建索引</h2><p>如 user 表中的性别字段，可以明显区分的才建议创建索引，如身份证等字段。</p><h2 id="字段的默认值不要为-null"><a href="#字段的默认值不要为-null" class="headerlink" title="字段的默认值不要为 null"></a>字段的默认值不要为 null</h2><p>这样会带来和预期不一致的查询结果。</p><h2 id="在字段上进行计算不能命中索引"><a href="#在字段上进行计算不能命中索引" class="headerlink" title="在字段上进行计算不能命中索引"></a>在字段上进行计算不能命中索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> FROM_UNIXTIME(create_time) <span class="operator">&lt;</span> CURDATE();</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>应该修改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> create_time <span class="operator">&lt;</span> FROM_UNIXTIME(CURDATE());</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="最左前缀问题"><a href="#最左前缀问题" class="headerlink" title="最左前缀问题"></a>最左前缀问题</h2><p>如果给 user 表中的 username pwd 字段创建了复合索引那么使用以下SQL 都是可以命中索引:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span> <span class="keyword">and</span> pwd <span class="operator">=</span><span class="string">&#x27;axsedf1sd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> pwd <span class="operator">=</span><span class="string">&#x27;axsedf1sd&#x27;</span> <span class="keyword">and</span> username<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>但是使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> pwd <span class="operator">=</span><span class="string">&#x27;axsedf1sd&#x27;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>是不能命中索引的。</p><h2 id="如果明确知道只有一条记录返回"><a href="#如果明确知道只有一条记录返回" class="headerlink" title="如果明确知道只有一条记录返回"></a>如果明确知道只有一条记录返回</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;zhangsan&#x27;</span> limit <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>可以提高效率，可以让数据库停止游标移动。</p><h2 id="不要让数据库帮我们做强制类型转换"><a href="#不要让数据库帮我们做强制类型转换" class="headerlink" title="不要让数据库帮我们做强制类型转换"></a>不要让数据库帮我们做强制类型转换</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> telno<span class="operator">=</span><span class="number">18722222222</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="variable">@pdai</span>: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>这样虽然可以查出数据，但是会导致全表扫描。需要修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name from user where telno=&#x27;18722222222&#x27;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        @pdai: 代码已经复制到剪贴板</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>如果需要进行 join 的字段两表的字段类型要相同, 不然也不会命中索引</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于redis缓存的问题</title>
      <link href="/2019/03/18/redis-redis%E7%9A%84%E5%87%A0%E6%80%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2019/03/18/redis-redis%E7%9A%84%E5%87%A0%E6%80%BB%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><ul><li><strong>问题来源</strong></li></ul><p>缓存穿透是指<strong>缓存和数据库中都没有的数据</strong>，而用户不断发起请求。由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><p>在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><p>如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><ul><li><strong>解决方案</strong></li></ul><ol><li>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;=0的直接拦截；</li><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</li><li>布隆过滤器。bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，</li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><ul><li><strong>问题来源</strong></li></ul><p>缓存击穿是指<strong>缓存中没有但数据库中有的数据</strong>（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。</p><ul><li><strong>解决方案</strong></li></ul><p>1、设置热点数据永远不过期。</p><p>2、接口限流与熔断，降级。重要的接口一定要做好限流策略，防止用户恶意刷接口，同时要降级准备，当接口中的某些 服务  不可用时候，进行熔断，失败快速返回机制。</p><p>3、加互斥锁</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><ul><li><strong>问题来源</strong></li></ul><p>缓存雪崩是指缓存中<strong>数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机</strong>。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><ul><li><strong>解决方案</strong></li></ul><ol><li>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</li><li>设置热点数据永远不过期。</li></ol>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda表达式不只是匿名类的语法糖</title>
      <link href="/2018/06/09/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E5%8F%AA%E6%98%AF%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
      <url>/2018/06/09/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E5%8F%AA%E6%98%AF%E5%8C%BF%E5%90%8D%E7%B1%BB%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96/</url>
      
        <content type="html"><![CDATA[<h4 id="表达式简介"><a href="#表达式简介" class="headerlink" title="表达式简介"></a>表达式简介</h4><p>Lambda表达式通常使用<code>(argument) -&gt; (body)</code>语法书写，如👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(arg1, arg2...) -&gt; &#123;body&#125;</span><br><span class="line">(type1 arg1, type2 arg2...) -&gt; &#123;body&#125;</span><br></pre></td></tr></table></figure><p>一些Lambda表达式例子👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span> a,<span class="keyword">int</span> b) -&gt; &#123;<span class="keyword">return</span> a + b&#125;</span><br><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">(String s) -&gt; &#123;System.out.println(s);&#125;</span><br><span class="line">() -&gt; <span class="number">42</span></span><br><span class="line">() -&gt; &#123;<span class="keyword">return</span> <span class="number">3.1415</span>&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="表达式结构"><a href="#表达式结构" class="headerlink" title="表达式结构"></a>表达式结构</h4><ul><li>一个Lambda表达式可以有零个或多个参数</li><li>参数的类型既可以明确声明，也可以根据上下文来推断。例如：<code>(int a)</code>与<code>(a)</code>效果相同</li><li>所有参数需包含在圆括号内，参数之间用逗号相隔。例如：<code>(a,b)</code>或<code>(int a, int b)</code>或<code>(String a, int b, float c)</code></li><li>空圆括号代表参数集为空。例如<code>() -&gt; 42</code></li><li>当只有一个参数，且其类型可推导时，圆括号可省略，如<code>a -&gt; return a*a</code></li><li>Lambda表达式的主体可能包含零条或多条语句</li><li>如果Lambda表达式的主体只有一条语句，花括号可省略。匿名函数的返回类型与该主体表达式一致</li><li>如果Lambda表达式的主体包含一条以上语句，则表达式必须包含在花括号中（形成代码块）。匿名函数的返回类型与代码块的返回类型一致，若没有返回则为空</li></ul><hr><h4 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h4><p>在Java中，Marker（标记）类型的接口是一种没有方法或属性声明的接口。简单地说，Marker接口是空接口。相似地，函数式接口是只包含一个抽象方法声明的接口。</p><p><code>java.lang.Runnable</code>就是一种函数式接口，在Runnable接口中之声明了一个方法<code>void run()</code>，相似地，ActionListener接口也是一种函数式接口，我们使用匿名内部类来实例化函数式接口的对象，有了Lambda表达式，这一方式可以得到简化。</p><p>每个Lambda表达式都能隐式地赋值给函数式接口，例如，我们可以通过Lambda表达式创建Runnable接口的引用👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runnable r = () -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure><p>当不指明函数式接口时，编译器会自动解释这种转化👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">    () -&gt; System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure><p>因此，在上面的代码中，编译器会自动推断：根据线程类的构造函数签名<code>public Thread(Runnable r) &#123;&#125;</code>，将该Lambda表达式赋给Runnable接口。</p><p>其他Lambda表达式及其函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;Integer&gt; c = (<span class="keyword">int</span> x) -&gt; &#123;System.out.println(x)&#125;;</span><br><span class="line">BiConsumer&lt;Integer, String&gt; b = (Integer x, String y) -&gt; System.out.println(x + <span class="string">&quot; : &quot;</span> + y);</span><br><span class="line">Predicater&lt;String&gt; p = (String s) -&gt; &#123;s == <span class="keyword">null</span>&#125;;</span><br><span class="line">以下是一种自定义的函数式接口👇</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkerInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义好函数式接口后，我们就可以使用了👇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerInterfaceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(WorkerInterface worker)</span> </span>&#123;</span><br><span class="line">        worker.doSomeWork();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// old method in java 7</span></span><br><span class="line">        execute(<span class="keyword">new</span> WorkerInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Work in Java 7&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// new method in java 8</span></span><br><span class="line">        execute( () -&gt; &#123;System.out.println(<span class="string">&quot;Work in Java 8&quot;</span>)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><ul><li><p>线程通过Lambda初始化</p></li><li><p>PS：Lambda可以视为一个匿名内部类对象，我们创建的Lambda表达式实质是创建一个对象，所以只要我们创建了接口对应的对象，然后将对应传递给指定的方法，即可完成方法的实际调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old method</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello From Java 7&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// new method</span></span><br><span class="line"><span class="keyword">new</span> Thread( () -&gt; System.out.println(<span class="string">&quot;Hello From Java 8&quot;</span>); ).start();</span><br></pre></td></tr></table></figure></li><li><p>Swing的事件处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old method</span></span><br><span class="line">button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Using old method click the button&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line"><span class="comment">// new method</span></span><br><span class="line">button.addActionListener( (e) -&gt; System.out.println(<span class="string">&quot;Using new method click the button&quot;</span>););</span><br></pre></td></tr></table></figure></li><li><p>打印给定数组中的所有元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old method</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer n : list) &#123;</span><br><span class="line">    System.out.println(n);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// new method</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">list.forEach(n -&gt; System.out.println(n));</span><br><span class="line">  </span><br><span class="line"><span class="comment">// another method</span></span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li><p>打印list中每个元素的平方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// old method</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">for</span> (Integer n : list) &#123;</span><br><span class="line">    <span class="keyword">int</span> x = n * n;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// new method</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">list.stream().map((x) -&gt; x*x).forEach(System.out::println);</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="Lambda与匿名内部类"><a href="#Lambda与匿名内部类" class="headerlink" title="Lambda与匿名内部类"></a>Lambda与匿名内部类</h4><ul><li>对于匿名内部类，关键字<code>this</code>解读为匿名类</li><li>对于Lambda表达式，关键词<code>this</code>解读为Lambda的外部类，且Java在编译代码时将Lambda表达式转化为类内的私有函数，它使用Java 7中的<code>invokedynamic</code>指令动态绑定该方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> java8 java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven依赖管理</title>
      <link href="/2018/04/18/Java-2018-07-24-maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/"/>
      <url>/2018/04/18/Java-2018-07-24-maven%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="Maven依赖管理"><a href="#Maven依赖管理" class="headerlink" title="Maven依赖管理"></a>Maven依赖管理</h3><p>本文主要总结了，在多module的项目中，父子依赖关系是如何创建及管理的。</p><hr><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>现在假设有这样一个项目：实现一个简单的rpc，则我们需要三个模块：</p><ul><li>注册中心</li><li>服务消费方</li><li>服务提供方</li></ul><p>其中，服务提供方需要注册到注册中心，服务消费方需要从注册中心获取服务提供方的列表，则三个模块都需要注册中心的依赖；服务消费方和服务提供方之间需要进行通信，则这两个模块都需要通信的依赖。</p><h4 id="如何创建一个父子模块的依赖关系"><a href="#如何创建一个父子模块的依赖关系" class="headerlink" title="如何创建一个父子模块的依赖关系"></a>如何创建一个父子模块的依赖关系</h4><p>首先，父子模块的关系体现在</p><ul><li>文件目录结构上的层级</li><li>pom中的管理</li></ul><p>其中，我们在预设的父模块pom.xml中添加如下标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-discover<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，我们就指定了rpc-discover、rpc-provider、rpc-consumer为rpc-root的子模块，子模块可以使用父模块的依赖。</p><hr><h4 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h4><p>在rpc-root中，通过使用<code>&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;</code>标签来管理依赖的版本。</p><ul><li><p>rpc-root.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.sxl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-discover<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>rpc-discover.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.sxl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-discover<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>这样，我们就可以在rpc-discover模块中使用版本为1.18.8的lombok依赖，再添加更多的依赖，只需要在父模块中对依赖的版本进行统一的管理，子模块只需要继承即可使用。</p><hr><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>不同于<code>&lt;dependencyManagement&gt;&lt;/dependencyManagement&gt;</code>这对标签，在<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>中引入的依赖都会被子项目自动引入，并默认被所有的子项目继承。</p><ul><li><p>rpc-root.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.sxl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-discover<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>rpc-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>rpc-discover.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>me.sxl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-root<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-discover<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>dependencyManagement</strong>内只进行依赖声明，不实现引入，所以子项目使用<strong>dependencyManagement</strong>的依赖需要显示地声明；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且 version 和 scope 都读取自父 pom; 另外如果子项目中指定了版本号，那么会使用子项目中指定的版本。</p><p><strong>dependencies</strong>的子项目回自动继承声明的全部依赖。</p>]]></content>
      
      
      <categories>
          
          <category> maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh 配置</title>
      <link href="/2017/03/18/git-2017-03-18-ssh/"/>
      <url>/2017/03/18/git-2017-03-18-ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh多个秘钥管理"><a href="#ssh多个秘钥管理" class="headerlink" title="ssh多个秘钥管理"></a>ssh多个秘钥管理</h1><h5 id="ssh-agent服务"><a href="#ssh-agent服务" class="headerlink" title="ssh-agent服务"></a>ssh-agent服务</h5><h6 id="管理员模式启动Windows-PowerShell"><a href="#管理员模式启动Windows-PowerShell" class="headerlink" title="管理员模式启动Windows PowerShell"></a>管理员模式启动<strong>Windows PowerShell</strong></h6><h6 id="1-使用下面两个命令行启动ssh-agent服务"><a href="#1-使用下面两个命令行启动ssh-agent服务" class="headerlink" title="1.使用下面两个命令行启动ssh-agent服务"></a>1.使用下面两个命令行启动<em><strong>ssh-agent服务</strong></em></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Service -Name ssh-agent -StartupType Manual</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Service ssh-agent</span><br></pre></td></tr></table></figure><p>2.添加到代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/自定义秘钥名称</span><br></pre></td></tr></table></figure><h3 id="3-配置git"><a href="#3-配置git" class="headerlink" title="3.配置git"></a>3.配置git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email “1044934446@qq.com”</span><br></pre></td></tr></table></figure><p>4.生成密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
